
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  000011e4  00001278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800168  00800168  000012e0  2**0
                  ALLOC
  3 .debug_aranges 00000528  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dd4  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008931  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002288  00000000  00000000  0000af0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000069b5  00000000  00000000  0000d195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007f0  00000000  00000000  00013b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003529  00000000  00000000  0001433c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003a58  00000000  00000000  00017865  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000700  00000000  00000000  0001b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		return 0;
	else
		return 1;
}

unsigned rf12_data(void) {
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop

	if (ReceivedByte < 0)
	  return _FDEV_EOF;

	return ReceivedByte;
}
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c4       	rjmp	.+2128   	; 0x87e <__vector_11>
      2e:	00 00       	nop
      30:	ed c3       	rjmp	.+2010   	; 0x80c <__vector_12>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d6 c0       	rjmp	.+428    	; 0x20a <__vector_23>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d2 e0       	ldi	r29, 0x02	; 2
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e4 ee       	ldi	r30, 0xE4	; 228
     14a:	f1 e1       	ldi	r31, 0x11	; 17
     14c:	02 c0       	rjmp	.+4      	; 0x152 <.do_copy_data_start>

0000014e <.do_copy_data_loop>:
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0

00000152 <.do_copy_data_start>:
     152:	a8 36       	cpi	r26, 0x68	; 104
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <.do_copy_data_loop>

00000158 <__do_clear_bss>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	a8 e6       	ldi	r26, 0x68	; 104
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	ac 38       	cpi	r26, 0x8C	; 140
     164:	b1 07       	cpc	r27, r17
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	85 d0       	rcall	.+266    	; 0x274 <main>
     16a:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <uuart_putc>:

		.NotificationEndpointNumber = CDC_NOTIFICATION_EPNUM,
		.NotificationEndpointSize = CDC_NOTIFICATION_EPSIZE,
		.NotificationEndpointDoubleBank = false, }, };

int uuart_putc(unsigned char c) {
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	48 2f       	mov	r20, r24
	if (USB_DeviceState == DEVICE_STATE_Configured) {
     176:	8e b3       	in	r24, 0x1e	; 30
     178:	84 30       	cpi	r24, 0x04	; 4
     17a:	09 f0       	breq	.+2      	; 0x17e <uuart_putc+0xe>
     17c:	29 c0       	rjmp	.+82     	; 0x1d0 <uuart_putc+0x60>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     17e:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     180:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     182:	20 91 fe 01 	lds	r18, 0x01FE
     186:	30 91 ff 01 	lds	r19, 0x01FF
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     18a:	8f bf       	out	0x3f, r24	; 63
		if (!RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
     18c:	80 91 fc 01 	lds	r24, 0x01FC
     190:	90 91 fd 01 	lds	r25, 0x01FD
     194:	28 17       	cp	r18, r24
     196:	39 07       	cpc	r19, r25
     198:	d9 f0       	breq	.+54     	; 0x1d0 <uuart_putc+0x60>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     19a:	c4 ef       	ldi	r28, 0xF4	; 244
     19c:	d1 e0       	ldi	r29, 0x01	; 1

			*Buffer->In = Data;
     19e:	e8 81       	ld	r30, Y
     1a0:	f9 81       	ldd	r31, Y+1	; 0x01
     1a2:	40 83       	st	Z, r20

			if (++Buffer->In == Buffer->End)
     1a4:	88 81       	ld	r24, Y
     1a6:	99 81       	ldd	r25, Y+1	; 0x01
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	99 83       	std	Y+1, r25	; 0x01
     1ac:	88 83       	st	Y, r24
     1ae:	2e 81       	ldd	r18, Y+6	; 0x06
     1b0:	3f 81       	ldd	r19, Y+7	; 0x07
     1b2:	82 17       	cp	r24, r18
     1b4:	93 07       	cpc	r25, r19
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <uuart_putc+0x50>
			  Buffer->In = Buffer->Start;
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	99 83       	std	Y+1, r25	; 0x01
     1be:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1c0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1c2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	9b 87       	std	Y+11, r25	; 0x0b
     1cc:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1ce:	2f bf       	out	0x3f, r18	; 63
			RingBuffer_Insert(&USARTtoUSB_Buffer, c);
		}
	}
	return 0;
}
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <uuart_puts>:

void uuart_puts(char *s) {
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	ec 01       	movw	r28, r24
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <uuart_puts+0xc>
	while (*s) {
		uuart_putc(*s);
     1e2:	c6 df       	rcall	.-116    	; 0x170 <uuart_putc>
		s++;
     1e4:	21 96       	adiw	r28, 0x01	; 1
	}
	return 0;
}

void uuart_puts(char *s) {
	while (*s) {
     1e6:	88 81       	ld	r24, Y
     1e8:	88 23       	and	r24, r24
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <uuart_puts+0x8>
		uuart_putc(*s);
		s++;
	}
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <EVENT_USB_Device_Connect>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     1f2:	8b b1       	in	r24, 0x0b	; 11
     1f4:	80 63       	ori	r24, 0x30	; 48
     1f6:	8f 7d       	andi	r24, 0xDF	; 223
     1f8:	8b b9       	out	0x0b, r24	; 11
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
	uuart_puts("\r\nconnected\r\n");
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	91 e0       	ldi	r25, 0x01	; 1
}
     1fe:	ed cf       	rjmp	.-38     	; 0x1da <uuart_puts>

00000200 <EVENT_USB_Device_Disconnect>:
     200:	8b b1       	in	r24, 0x0b	; 11
     202:	80 63       	ori	r24, 0x30	; 48
     204:	8f 7e       	andi	r24, 0xEF	; 239
     206:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     208:	08 95       	ret

0000020a <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */

ISR(USART1_RX_vect, ISR_BLOCK) {
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
//	uint8_t ReceivedByte = UDR1;
//
//	if (USB_DeviceState == DEVICE_STATE_Configured)
//		RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     214:	0f 90       	pop	r0
     216:	0f be       	out	0x3f, r0	; 63
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	18 95       	reti

0000021e <EVENT_CDC_Device_LineEncodingChanged>:
//
//	 */
//	UCSR1C = ConfigMask;
//	UCSR1A = (1 << U2X1);
//	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
}
     21e:	08 95       	ret

00000220 <EVENT_USB_Device_ControlRequest>:
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     220:	81 e2       	ldi	r24, 0x21	; 33
     222:	91 e0       	ldi	r25, 0x01	; 1
}
     224:	b6 c6       	rjmp	.+3436   	; 0xf92 <CDC_Device_ProcessControlRequest>

00000226 <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
	uuart_puts("\r\nconfig changed\r\n");
     226:	8e e0       	ldi	r24, 0x0E	; 14
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	d7 df       	rcall	.-82     	; 0x1da <uuart_puts>
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(
     22c:	81 e2       	ldi	r24, 0x21	; 33
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	60 d6       	rcall	.+3264   	; 0xef2 <CDC_Device_ConfigureEndpoints>
			&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     232:	80 fd       	sbrc	r24, 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <EVENT_USB_Device_ConfigurationChanged+0x14>
     236:	90 e1       	ldi	r25, 0x10	; 16
     238:	01 c0       	rjmp	.+2      	; 0x23c <EVENT_USB_Device_ConfigurationChanged+0x16>
     23a:	90 e2       	ldi	r25, 0x20	; 32
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	90 95       	com	r25
     240:	80 63       	ori	r24, 0x30	; 48
     242:	98 23       	and	r25, r24
     244:	9b b9       	out	0x0b, r25	; 11
}
     246:	08 95       	ret

00000248 <SetupHardware>:
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void) {
/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     248:	84 b7       	in	r24, 0x34	; 52
     24a:	87 7f       	andi	r24, 0xF7	; 247
     24c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     24e:	88 e1       	ldi	r24, 0x18	; 24
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	80 93 60 00 	sts	0x0060, r24
     258:	10 92 60 00 	sts	0x0060, r1
     25c:	0f be       	out	0x3f, r0	; 63

	rf12_init();
     25e:	f9 d0       	rcall	.+498    	; 0x452 <rf12_init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     260:	8a b1       	in	r24, 0x0a	; 10
     262:	80 63       	ori	r24, 0x30	; 48
     264:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     266:	8b b1       	in	r24, 0x0b	; 11
     268:	80 63       	ori	r24, 0x30	; 48
     26a:	8b b9       	out	0x0b, r24	; 11

	/* Disable clock division */
//TODO	clock_prescale_set(0);
	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     26c:	c0 d2       	rcall	.+1408   	; 0x7ee <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	85 bd       	out	0x25, r24	; 37
}
     272:	08 95       	ret

00000274 <main>:
}

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void) {
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29

	SetupHardware();
     280:	e3 df       	rcall	.-58     	; 0x248 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     282:	e8 e6       	ldi	r30, 0x68	; 104
     284:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     286:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     288:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     28a:	84 e7       	ldi	r24, 0x74	; 116
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	91 83       	std	Z+1, r25	; 0x01
     290:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     292:	93 83       	std	Z+3, r25	; 0x03
     294:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     296:	95 83       	std	Z+5, r25	; 0x05
     298:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     29a:	84 ef       	ldi	r24, 0xF4	; 244
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	97 83       	std	Z+7, r25	; 0x07
     2a0:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	91 87       	std	Z+9, r25	; 0x09
     2a8:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     2aa:	13 86       	std	Z+11, r1	; 0x0b
     2ac:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2ae:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2b0:	e4 ef       	ldi	r30, 0xF4	; 244
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2b4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2b6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     2c0:	93 83       	std	Z+3, r25	; 0x03
     2c2:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     2c4:	95 83       	std	Z+5, r25	; 0x05
     2c6:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     2c8:	80 e8       	ldi	r24, 0x80	; 128
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	97 83       	std	Z+7, r25	; 0x07
     2ce:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     2d0:	80 e8       	ldi	r24, 0x80	; 128
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	91 87       	std	Z+9, r25	; 0x09
     2d6:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     2d8:	13 86       	std	Z+11, r1	; 0x0b
     2da:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2dc:	2f bf       	out	0x3f, r18	; 63
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     2de:	8b b1       	in	r24, 0x0b	; 11
     2e0:	80 63       	ori	r24, 0x30	; 48
     2e2:	8f 7e       	andi	r24, 0xEF	; 239
     2e4:	8b b9       	out	0x0b, r24	; 11

//	uuart_puts("#Uart-Init... ready\r\n#RFM12-Init... ");
//	uuart_puts("ready\r\n#");

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     2e6:	78 94       	sei
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2e8:	84 ef       	ldi	r24, 0xF4	; 244
     2ea:	e8 2e       	mov	r14, r24
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	f8 2e       	mov	r15, r24
     2f0:	00 e0       	ldi	r16, 0x00	; 0
     2f2:	10 e0       	ldi	r17, 0x00	; 0
//	PORTD = 0;

	long i = 0;
	for (;;) {

		rfm12_int_process();
     2f4:	25 d1       	rcall	.+586    	; 0x540 <rfm12_int_process>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2f6:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2f8:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     2fa:	c0 91 fe 01 	lds	r28, 0x01FE
     2fe:	d0 91 ff 01 	lds	r29, 0x01FF
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     302:	8f bf       	out	0x3f, r24	; 63
//				}
//			}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t) (sizeof(USARTtoUSB_Buffer_Data) * .75)))
     304:	a8 99       	sbic	0x15, 0	; 21
     306:	03 c0       	rjmp	.+6      	; 0x30e <__stack+0xf>
     308:	c1 36       	cpi	r28, 0x61	; 97
     30a:	d1 05       	cpc	r29, r1
     30c:	30 f1       	brcs	.+76     	; 0x35a <__stack+0x5b>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     30e:	a8 9a       	sbi	0x15, 0	; 21
     310:	22 c0       	rjmp	.+68     	; 0x356 <__stack+0x57>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--) {
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     312:	e0 91 f6 01 	lds	r30, 0x01F6
     316:	f0 91 f7 01 	lds	r31, 0x01F7
     31a:	81 e2       	ldi	r24, 0x21	; 33
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	60 81       	ld	r22, Z
     320:	c4 d5       	rcall	.+2952   	; 0xeaa <CDC_Device_SendByte>
     322:	88 23       	and	r24, r24
     324:	d1 f4       	brne	.+52     	; 0x35a <__stack+0x5b>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     326:	f7 01       	movw	r30, r14

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     328:	82 81       	ldd	r24, Z+2	; 0x02
     32a:	93 81       	ldd	r25, Z+3	; 0x03
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	93 83       	std	Z+3, r25	; 0x03
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	26 81       	ldd	r18, Z+6	; 0x06
     334:	37 81       	ldd	r19, Z+7	; 0x07
     336:	82 17       	cp	r24, r18
     338:	93 07       	cpc	r25, r19
     33a:	21 f4       	brne	.+8      	; 0x344 <__stack+0x45>
			  Buffer->Out = Buffer->Start;
     33c:	84 81       	ldd	r24, Z+4	; 0x04
     33e:	95 81       	ldd	r25, Z+5	; 0x05
     340:	93 83       	std	Z+3, r25	; 0x03
     342:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     344:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     346:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     348:	82 85       	ldd	r24, Z+10	; 0x0a
     34a:	93 85       	ldd	r25, Z+11	; 0x0b
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	93 87       	std	Z+11, r25	; 0x0b
     350:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     352:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     354:	21 97       	sbiw	r28, 0x01	; 1
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--) {
     356:	20 97       	sbiw	r28, 0x00	; 0
     358:	e1 f6       	brne	.-72     	; 0x312 <__stack+0x13>
     35a:	0f 5f       	subi	r16, 0xFF	; 255
     35c:	1f 4f       	sbci	r17, 0xFF	; 255
		/* Load the next byte from the USART transmit buffer into the USART */
//		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
//			Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));

		i++;
		if (i > 500)
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	05 3f       	cpi	r16, 0xF5	; 245
     362:	18 07       	cpc	r17, r24
     364:	09 f0       	breq	.+2      	; 0x368 <__stack+0x69>
     366:	c6 cf       	rjmp	.-116    	; 0x2f4 <main+0x80>
		{
			CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     368:	81 e2       	ldi	r24, 0x21	; 33
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	8f d5       	rcall	.+2846   	; 0xe8c <CDC_Device_USBTask>
			USB_USBTask();
     36e:	50 d5       	rcall	.+2720   	; 0xe10 <USB_USBTask>
     370:	bf cf       	rjmp	.-130    	; 0x2f0 <main+0x7c>

00000372 <rf12_trans>:

unsigned short rf12_trans(unsigned short wert) {
	unsigned short werti = 0;
	unsigned char i;

	cbi(FSK_PORT, CS);
     372:	5f 98       	cbi	0x0b, 7	; 11
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	50 e0       	ldi	r21, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     37a:	61 e0       	ldi	r22, 0x01	; 1
	for (i = 0; i < 16; i++) {
		if (wert & 32768)
     37c:	97 ff       	sbrs	r25, 7
     37e:	02 c0       	rjmp	.+4      	; 0x384 <rf12_trans+0x12>
			sbi(RF_PORT, SDI);
     380:	2a 9a       	sbi	0x05, 2	; 5
     382:	01 c0       	rjmp	.+2      	; 0x386 <rf12_trans+0x14>
		else
			cbi(RF_PORT, SDI);
     384:	2a 98       	cbi	0x05, 2	; 5
		werti <<= 1;
     386:	22 0f       	add	r18, r18
     388:	33 1f       	adc	r19, r19
		if (RF_PIN & (1 << SDO))
     38a:	1b 99       	sbic	0x03, 3	; 3
			werti |= 1;
     38c:	21 60       	ori	r18, 0x01	; 1
		sbi(RF_PORT, SCK);
     38e:	29 9a       	sbi	0x05, 1	; 5
     390:	46 2f       	mov	r20, r22
     392:	4a 95       	dec	r20
     394:	f1 f7       	brne	.-4      	; 0x392 <rf12_trans+0x20>
		wert <<= 1;
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
     396:	29 98       	cbi	0x05, 1	; 5
unsigned short rf12_trans(unsigned short wert) {
	unsigned short werti = 0;
	unsigned char i;

	cbi(FSK_PORT, CS);
	for (i = 0; i < 16; i++) {
     398:	5f 5f       	subi	r21, 0xFF	; 255
     39a:	50 31       	cpi	r21, 0x10	; 16
     39c:	19 f0       	breq	.+6      	; 0x3a4 <rf12_trans+0x32>
			cbi(RF_PORT, SDI);
		werti <<= 1;
		if (RF_PIN & (1 << SDO))
			werti |= 1;
		sbi(RF_PORT, SCK);
		wert <<= 1;
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	ec cf       	rjmp	.-40     	; 0x37c <rf12_trans+0xa>
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
	}sbi(FSK_PORT, CS);
     3a4:	5f 9a       	sbi	0x0b, 7	; 11
	return werti;
}
     3a6:	c9 01       	movw	r24, r18
     3a8:	08 95       	ret

000003aa <rfm12_setbandwidth>:

void rfm12_setbandwidth(unsigned char bandwidth, unsigned char gain,
		unsigned char drssi) {
	rf12_trans(
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	f5 e0       	ldi	r31, 0x05	; 5
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	fa 95       	dec	r31
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <rfm12_setbandwidth+0x4>
     3b6:	90 70       	andi	r25, 0x00	; 0
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	47 70       	andi	r20, 0x07	; 7
     3bc:	50 70       	andi	r21, 0x00	; 0
     3be:	84 2b       	or	r24, r20
     3c0:	95 2b       	or	r25, r21
     3c2:	94 69       	ori	r25, 0x94	; 148
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	63 70       	andi	r22, 0x03	; 3
     3c8:	70 70       	andi	r23, 0x00	; 0
     3ca:	e3 e0       	ldi	r30, 0x03	; 3
     3cc:	66 0f       	add	r22, r22
     3ce:	77 1f       	adc	r23, r23
     3d0:	ea 95       	dec	r30
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <rfm12_setbandwidth+0x22>
     3d4:	86 2b       	or	r24, r22
     3d6:	97 2b       	or	r25, r23
			0x9400 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
}
     3d8:	cc cf       	rjmp	.-104    	; 0x372 <rf12_trans>

000003da <rfm12_setfreq>:

void rfm12_setfreq(unsigned short freq) {
	if (freq < 96) // 430,2400MHz
     3da:	80 36       	cpi	r24, 0x60	; 96
     3dc:	91 05       	cpc	r25, r1
     3de:	18 f4       	brcc	.+6      	; 0x3e6 <rfm12_setfreq+0xc>
     3e0:	80 e6       	ldi	r24, 0x60	; 96
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <rfm12_setfreq+0x18>
     3e6:	2f e0       	ldi	r18, 0x0F	; 15
     3e8:	80 34       	cpi	r24, 0x40	; 64
     3ea:	92 07       	cpc	r25, r18
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <rfm12_setfreq+0x18>
     3ee:	8f e3       	ldi	r24, 0x3F	; 63
     3f0:	9f e0       	ldi	r25, 0x0F	; 15
		freq = 96;
	else if (freq > 3903) // 439,7575MHz
		freq = 3903;
	rf12_trans(0xA000 | freq);
     3f2:	90 6a       	ori	r25, 0xA0	; 160
}
     3f4:	be cf       	rjmp	.-132    	; 0x372 <rf12_trans>

000003f6 <rfm12_setbaud>:
void rfm12_setbaud(unsigned short baud) {
	if (baud < 663)
     3f6:	22 e0       	ldi	r18, 0x02	; 2
     3f8:	87 39       	cpi	r24, 0x97	; 151
     3fa:	92 07       	cpc	r25, r18
     3fc:	d8 f0       	brcs	.+54     	; 0x434 <rfm12_setbaud+0x3e>
     3fe:	9c 01       	movw	r18, r24
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
		return;
	if (baud < 5400) // Baudrate= 344827,58621/(R+1)/(1+CS*7)
     404:	88 51       	subi	r24, 0x18	; 24
     406:	95 41       	sbci	r25, 0x15	; 21
     408:	58 f4       	brcc	.+22     	; 0x420 <rfm12_setbaud+0x2a>
		rf12_trans(0xC680 | ((43104 / baud) - 1));
     40a:	60 e6       	ldi	r22, 0x60	; 96
     40c:	78 ea       	ldi	r23, 0xA8	; 168
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	88 d6       	rcall	.+3344   	; 0x1124 <__divmodsi4>
     414:	da 01       	movw	r26, r20
     416:	c9 01       	movw	r24, r18
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	80 68       	ori	r24, 0x80	; 128
     41c:	96 6c       	ori	r25, 0xC6	; 198
     41e:	a9 cf       	rjmp	.-174    	; 0x372 <rf12_trans>
	else
		rf12_trans(0xC600 | ((344828UL / baud) - 1));
     420:	6c ef       	ldi	r22, 0xFC	; 252
     422:	72 e4       	ldi	r23, 0x42	; 66
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	5b d6       	rcall	.+3254   	; 0x10e0 <__udivmodsi4>
     42a:	da 01       	movw	r26, r20
     42c:	c9 01       	movw	r24, r18
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	96 6c       	ori	r25, 0xC6	; 198
     432:	9f cf       	rjmp	.-194    	; 0x372 <rf12_trans>
     434:	08 95       	ret

00000436 <rfm12_setpower>:
}

void rfm12_setpower(unsigned char power, unsigned char mod) {
	rf12_trans(0x9800 | (power & 7) | ((mod & 15) << 4));
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	90 70       	andi	r25, 0x00	; 0
     43c:	98 69       	ori	r25, 0x98	; 152
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	a4 e0       	ldi	r26, 0x04	; 4
     442:	66 0f       	add	r22, r22
     444:	77 1f       	adc	r23, r23
     446:	aa 95       	dec	r26
     448:	e1 f7       	brne	.-8      	; 0x442 <rfm12_setpower+0xc>
     44a:	70 70       	andi	r23, 0x00	; 0
     44c:	86 2b       	or	r24, r22
     44e:	97 2b       	or	r25, r23
}
     450:	90 cf       	rjmp	.-224    	; 0x372 <rf12_trans>

00000452 <rf12_init>:

void rf12_init(void) {
	RF_DDR = (1 << SDI) | (1 << SCK);
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	84 b9       	out	0x04, r24	; 4
	FSK_DDR = (1 << CS) | (1 << FSK);
     456:	88 e8       	ldi	r24, 0x88	; 136
     458:	8a b9       	out	0x0a, r24	; 10

	sbi(FSK_PORT, CS);
     45a:	5f 9a       	sbi	0x0b, 7	; 11
	sbi(FSK_PORT, FSK);
     45c:	5b 9a       	sbi	0x0b, 3	; 11
     45e:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     460:	40 e4       	ldi	r20, 0x40	; 64
     462:	5c e9       	ldi	r21, 0x9C	; 156
     464:	ca 01       	movw	r24, r20
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <rf12_init+0x14>

	for (unsigned char i = 0; i < 10; i++)
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	2a 30       	cpi	r18, 0x0A	; 10
     46e:	d1 f7       	brne	.-12     	; 0x464 <rf12_init+0x12>
		_delay_ms(10); // wait until POR done

	rf12_trans(0xC0E0); // AVR CLK: 10MHz
     470:	80 ee       	ldi	r24, 0xE0	; 224
     472:	90 ec       	ldi	r25, 0xC0	; 192
     474:	7e df       	rcall	.-260    	; 0x372 <rf12_trans>
	rf12_trans(0x80E7); // Enable FIFO and 868
     476:	87 ee       	ldi	r24, 0xE7	; 231
     478:	90 e8       	ldi	r25, 0x80	; 128
     47a:	7b df       	rcall	.-266    	; 0x372 <rf12_trans>
	rf12_trans(0xC2AB); // Data Filter: internal
     47c:	8b ea       	ldi	r24, 0xAB	; 171
     47e:	92 ec       	ldi	r25, 0xC2	; 194
     480:	78 df       	rcall	.-272    	; 0x372 <rf12_trans>
	rf12_trans(0xCA81); // Set FIFO mode
     482:	81 e8       	ldi	r24, 0x81	; 129
     484:	9a ec       	ldi	r25, 0xCA	; 202
     486:	75 df       	rcall	.-278    	; 0x372 <rf12_trans>
	rf12_trans(0xE000); // disable wakeuptimer
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 ee       	ldi	r25, 0xE0	; 224
     48c:	72 df       	rcall	.-284    	; 0x372 <rf12_trans>
	rf12_trans(0xC800); // disable low duty cycle
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	98 ec       	ldi	r25, 0xC8	; 200
     492:	6f df       	rcall	.-290    	; 0x372 <rf12_trans>
	rf12_trans(0xC4F7); // AFC settings: autotuning: -10kHz...+7,5kHz
     494:	87 ef       	ldi	r24, 0xF7	; 247
     496:	94 ec       	ldi	r25, 0xC4	; 196
     498:	6c df       	rcall	.-296    	; 0x372 <rf12_trans>

	rfm12_setfreq(RF12FREQ868(868.3));
     49a:	8b e7       	ldi	r24, 0x7B	; 123
     49c:	96 e0       	ldi	r25, 0x06	; 6
     49e:	9d df       	rcall	.-198    	; 0x3da <rfm12_setfreq>
	rfm12_setbandwidth(4, 1, 4);
     4a0:	84 e0       	ldi	r24, 0x04	; 4
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	44 e0       	ldi	r20, 0x04	; 4
     4a6:	81 df       	rcall	.-254    	; 0x3aa <rfm12_setbandwidth>
	rfm12_setbaud(666);
     4a8:	8a e9       	ldi	r24, 0x9A	; 154
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	a4 df       	rcall	.-184    	; 0x3f6 <rfm12_setbaud>
	rfm12_setpower(0, 6);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	66 e0       	ldi	r22, 0x06	; 6

}
     4b2:	c1 cf       	rjmp	.-126    	; 0x436 <rfm12_setpower>

000004b4 <rfm12_init>:

void rfm12_init(void) {
	rf12_init();
     4b4:	ce cf       	rjmp	.-100    	; 0x452 <rf12_init>
}
     4b6:	08 95       	ret

000004b8 <rf12_ready>:
unsigned char rf12_ready(unsigned char bTimeout) {
	int timeout = 10000;

	cbi(RF_PORT, SDI);
     4b8:	2a 98       	cbi	0x05, 2	; 5
	cbi(RF_PORT, CS);
     4ba:	2f 98       	cbi	0x05, 7	; 5
	__asm__ __volatile__ ("nop" ::);
     4bc:	00 00       	nop
     4be:	20 e1       	ldi	r18, 0x10	; 16
     4c0:	37 e2       	ldi	r19, 0x27	; 39
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c2:	45 e0       	ldi	r20, 0x05	; 5
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <rf12_ready+0x1c>
	while (!(RF_PIN & (1 << SDO)) && timeout) {
		if (bTimeout) {
     4c6:	88 23       	and	r24, r24
     4c8:	29 f0       	breq	.+10     	; 0x4d4 <rf12_ready+0x1c>
			timeout--;
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	30 40       	sbci	r19, 0x00	; 0
     4ce:	94 2f       	mov	r25, r20
     4d0:	9a 95       	dec	r25
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <rf12_ready+0x18>
	int timeout = 10000;

	cbi(RF_PORT, SDI);
	cbi(RF_PORT, CS);
	__asm__ __volatile__ ("nop" ::);
	while (!(RF_PIN & (1 << SDO)) && timeout) {
     4d4:	1b 99       	sbic	0x03, 3	; 3
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <rf12_ready+0x26>
     4d8:	21 15       	cp	r18, r1
     4da:	31 05       	cpc	r19, r1
     4dc:	a1 f7       	brne	.-24     	; 0x4c6 <rf12_ready+0xe>
		if (bTimeout) {
			timeout--;
			_delay_us(1); // wait until FIFO ready
		}
	}sbi(PORTB, CS);
     4de:	2f 9a       	sbi	0x05, 7	; 5
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	23 2b       	or	r18, r19
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <rf12_ready+0x30>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
	if (timeout == 0)
		return 0;
	else
		return 1;
}
     4e8:	08 95       	ret

000004ea <rf12_rxbyte>:
		*data++ = rf12_trans(0xB000);
	}
	rf12_trans(0x8208); // RX off
}

unsigned char rf12_rxbyte(char *data) {
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
	int t = rf12_ready(1);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	e2 df       	rcall	.-60     	; 0x4b8 <rf12_ready>
	if (!t) {
     4f4:	88 23       	and	r24, r24
     4f6:	29 f0       	breq	.+10     	; 0x502 <rf12_rxbyte+0x18>
		return 0;
	}
	*data = rf12_trans(0xB000);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 eb       	ldi	r25, 0xB0	; 176
     4fc:	3a df       	rcall	.-396    	; 0x372 <rf12_trans>
     4fe:	88 83       	st	Y, r24
     500:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <enable_rx>:

void enable_rx() {
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
	rf12_trans(0x82C8); // RX on
     50c:	88 ec       	ldi	r24, 0xC8	; 200
     50e:	92 e8       	ldi	r25, 0x82	; 130
     510:	30 df       	rcall	.-416    	; 0x372 <rf12_trans>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     512:	00 e4       	ldi	r16, 0x40	; 64
     514:	1c e9       	ldi	r17, 0x9C	; 156
     516:	c8 01       	movw	r24, r16
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <enable_rx+0x10>
	_delay_ms(10);
	rf12_trans(0xCA81); // set FIFO mode
     51c:	81 e8       	ldi	r24, 0x81	; 129
     51e:	9a ec       	ldi	r25, 0xCA	; 202
     520:	28 df       	rcall	.-432    	; 0x372 <rf12_trans>
     522:	c8 01       	movw	r24, r16
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <enable_rx+0x1c>
	_delay_ms(10);
	rf12_trans(0xCA83); // enable FIFO
     528:	83 e8       	ldi	r24, 0x83	; 131
     52a:	9a ec       	ldi	r25, 0xCA	; 202
     52c:	22 df       	rcall	.-444    	; 0x372 <rf12_trans>
     52e:	c8 01       	movw	r24, r16
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <enable_rx+0x28>
	_delay_ms(10);
}
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <disable_rx>:

void disable_rx() {
	rf12_trans(0x8208); // RX off
     53a:	88 e0       	ldi	r24, 0x08	; 8
     53c:	92 e8       	ldi	r25, 0x82	; 130
}
     53e:	19 cf       	rjmp	.-462    	; 0x372 <rf12_trans>

00000540 <rfm12_int_process>:
		*data = rf12_trans(0xB000);
	}
	return (bOk);
}

void rfm12_int_process(void) {
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	c4 55       	subi	r28, 0x54	; 84
     55a:	d0 40       	sbci	r29, 0x00	; 0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
	uint16_t status = rf12_trans(0x0000);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	03 df       	rcall	.-506    	; 0x372 <rf12_trans>

	if (status & 0x4000) {
     56c:	96 ff       	sbrs	r25, 6
     56e:	03 c0       	rjmp	.+6      	; 0x576 <rfm12_int_process+0x36>
		uuart_puts("rfm12/por - init");
     570:	89 e3       	ldi	r24, 0x39	; 57
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	04 c0       	rjmp	.+8      	; 0x57e <rfm12_int_process+0x3e>
		rfm12_init();
		return;
	}

	if (status & 0x2000) {
     576:	95 ff       	sbrs	r25, 5
     578:	05 c0       	rjmp	.+10     	; 0x584 <rfm12_int_process+0x44>
		uuart_puts("rfm12/overflow - init");
     57a:	8a e4       	ldi	r24, 0x4A	; 74
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	2d de       	rcall	.-934    	; 0x1da <uuart_puts>
		rfm12_init();
     580:	99 df       	rcall	.-206    	; 0x4b4 <rfm12_init>
     582:	5a c0       	rjmp	.+180    	; 0x638 <rfm12_int_process+0xf8>
		//    return;
	}

	char bOk = (status & 0x0200) == 0;
	//  bOk = rf12_ready(1);
	if (bOk) {
     584:	91 fd       	sbrc	r25, 1
     586:	58 c0       	rjmp	.+176    	; 0x638 <rfm12_int_process+0xf8>
     588:	95 e1       	ldi	r25, 0x15	; 21
     58a:	a9 2e       	mov	r10, r25
     58c:	b1 2c       	mov	r11, r1
     58e:	ac 0e       	add	r10, r28
     590:	bd 1e       	adc	r11, r29
     592:	75 01       	movw	r14, r10
     594:	cc 24       	eor	r12, r12
     596:	dd 24       	eor	r13, r13
		char buf[64];
		unsigned int x = 0;
		unsigned int size = 5;
		while (1) {
			buf[x] = 0;
     598:	f7 01       	movw	r30, r14
     59a:	10 82       	st	Z, r1
			int res = rf12_rxbyte(buf + x);
     59c:	c7 01       	movw	r24, r14
     59e:	a5 df       	rcall	.-182    	; 0x4ea <rf12_rxbyte>
			if (!res) {
			}
			switch (buf[4]) {
     5a0:	89 8d       	ldd	r24, Y+25	; 0x19
     5a2:	85 36       	cpi	r24, 0x65	; 101
     5a4:	51 f0       	breq	.+20     	; 0x5ba <rfm12_int_process+0x7a>
     5a6:	86 36       	cpi	r24, 0x66	; 102
     5a8:	18 f4       	brcc	.+6      	; 0x5b0 <rfm12_int_process+0x70>
     5aa:	84 35       	cpi	r24, 0x54	; 84
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <rfm12_int_process+0x86>
     5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <rfm12_int_process+0x80>
     5b0:	88 36       	cpi	r24, 0x68	; 104
     5b2:	48 f4       	brcc	.+18     	; 0x5c6 <rfm12_int_process+0x86>
     5b4:	03 e1       	ldi	r16, 0x13	; 19
     5b6:	10 e0       	ldi	r17, 0x00	; 0
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <rfm12_int_process+0x8a>
     5ba:	09 e0       	ldi	r16, 0x09	; 9
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <rfm12_int_process+0x8a>
     5c0:	09 e1       	ldi	r16, 0x19	; 25
     5c2:	10 e0       	ldi	r17, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <rfm12_int_process+0x8a>
			case 'f':
				size = 19;
				break;
			case 'T':
				size = 25;
				break;
     5c6:	06 e0       	ldi	r16, 0x06	; 6
     5c8:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				size = 6;
				break;
			}
			x++;
     5ca:	08 94       	sec
     5cc:	c1 1c       	adc	r12, r1
     5ce:	d1 1c       	adc	r13, r1
     5d0:	08 94       	sec
     5d2:	e1 1c       	adc	r14, r1
     5d4:	f1 1c       	adc	r15, r1
			if (x >= size)
     5d6:	c0 16       	cp	r12, r16
     5d8:	d1 06       	cpc	r13, r17
     5da:	f0 f2       	brcs	.-68     	; 0x598 <rfm12_int_process+0x58>
				break;
		}

		disable_rx();
     5dc:	ae df       	rcall	.-164    	; 0x53a <disable_rx>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5de:	85 e3       	ldi	r24, 0x35	; 53
     5e0:	8a 95       	dec	r24
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <rfm12_int_process+0xa0>
		_delay_us(10);
		enable_rx();
     5e4:	91 df       	rcall	.-222    	; 0x508 <enable_rx>

		if (size > 6) {
     5e6:	06 30       	cpi	r16, 0x06	; 6
     5e8:	11 05       	cpc	r17, r1
     5ea:	31 f1       	breq	.+76     	; 0x638 <rfm12_int_process+0xf8>

			uuart_puts("\r\n>");
     5ec:	80 e6       	ldi	r24, 0x60	; 96
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	f4 dd       	rcall	.-1048   	; 0x1da <uuart_puts>
			char s[20];

			for (int c = 0; c < size; c++) {
     5f2:	85 e1       	ldi	r24, 0x15	; 21
     5f4:	e8 2e       	mov	r14, r24
     5f6:	f1 2c       	mov	r15, r1
     5f8:	ec 0e       	add	r14, r28
     5fa:	fd 1e       	adc	r15, r29
     5fc:	e0 0e       	add	r14, r16
     5fe:	f1 1e       	adc	r15, r17
				itoa(buf[c], s, 16);
     600:	8e 01       	movw	r16, r28
     602:	0f 5f       	subi	r16, 0xFF	; 255
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	12 c0       	rjmp	.+36     	; 0x62c <rfm12_int_process+0xec>
     608:	f5 01       	movw	r30, r10
     60a:	80 81       	ld	r24, Z
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	b8 01       	movw	r22, r16
     610:	40 e1       	ldi	r20, 0x10	; 16
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	a2 d5       	rcall	.+2884   	; 0x115a <itoa>
				if (buf[c] < 16) {
     616:	f5 01       	movw	r30, r10
     618:	80 81       	ld	r24, Z
     61a:	80 31       	cpi	r24, 0x10	; 16
     61c:	10 f4       	brcc	.+4      	; 0x622 <rfm12_int_process+0xe2>
					uuart_putc('0');
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	a7 dd       	rcall	.-1202   	; 0x170 <uuart_putc>
				}
				uuart_puts(s);
     622:	c8 01       	movw	r24, r16
     624:	da dd       	rcall	.-1100   	; 0x1da <uuart_puts>
     626:	08 94       	sec
     628:	a1 1c       	adc	r10, r1
     62a:	b1 1c       	adc	r11, r1
		if (size > 6) {

			uuart_puts("\r\n>");
			char s[20];

			for (int c = 0; c < size; c++) {
     62c:	ae 14       	cp	r10, r14
     62e:	bf 04       	cpc	r11, r15
     630:	59 f7       	brne	.-42     	; 0x608 <rfm12_int_process+0xc8>
				if (buf[c] < 16) {
					uuart_putc('0');
				}
				uuart_puts(s);
			}
			uuart_puts("\r\n#");
     632:	84 e6       	ldi	r24, 0x64	; 100
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	d1 dd       	rcall	.-1118   	; 0x1da <uuart_puts>

		}
	}
	return;

}
     638:	cc 5a       	subi	r28, 0xAC	; 172
     63a:	df 4f       	sbci	r29, 0xFF	; 255
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	08 95       	ret

0000065c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     65c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     65e:	92 30       	cpi	r25, 0x02	; 2
     660:	49 f0       	breq	.+18     	; 0x674 <CALLBACK_USB_GetDescriptor+0x18>
     662:	93 30       	cpi	r25, 0x03	; 3
     664:	61 f0       	breq	.+24     	; 0x67e <CALLBACK_USB_GetDescriptor+0x22>
     666:	91 30       	cpi	r25, 0x01	; 1
     668:	f9 f4       	brne	.+62     	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x4c>
     66a:	e8 e9       	ldi	r30, 0x98	; 152
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	22 e1       	ldi	r18, 0x12	; 18
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	1e c0       	rjmp	.+60     	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x54>
     674:	ea ea       	ldi	r30, 0xAA	; 170
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	2e e3       	ldi	r18, 0x3E	; 62
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	19 c0       	rjmp	.+50     	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	49 f0       	breq	.+18     	; 0x694 <CALLBACK_USB_GetDescriptor+0x38>
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	18 f0       	brcs	.+6      	; 0x68c <CALLBACK_USB_GetDescriptor+0x30>
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	79 f4       	brne	.+30     	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x4c>
     68a:	08 c0       	rjmp	.+16     	; 0x69c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     68c:	e8 ee       	ldi	r30, 0xE8	; 232
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	84 91       	lpm	r24, Z+
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     694:	ec ee       	ldi	r30, 0xEC	; 236
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	84 91       	lpm	r24, Z+
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     69c:	e6 e0       	ldi	r30, 0x06	; 6
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	84 91       	lpm	r24, Z+
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x54>
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     6b0:	ed 93       	st	X+, r30
     6b2:	fc 93       	st	X, r31
	return Size;
}
     6b4:	c9 01       	movw	r24, r18
     6b6:	08 95       	ret

000006b8 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     6b8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6bc:	80 91 eb 00 	lds	r24, 0x00EB
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     6c6:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     6ca:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     6ce:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6d2:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     6d6:	88 1f       	adc	r24, r24
     6d8:	88 27       	eor	r24, r24
     6da:	88 1f       	adc	r24, r24
     6dc:	08 95       	ret

000006de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6de:	80 91 84 02 	lds	r24, 0x0284
     6e2:	88 23       	and	r24, r24
     6e4:	8c f4       	brge	.+34     	; 0x708 <Endpoint_ClearStatusStage+0x2a>
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6e8:	8e b3       	in	r24, 0x1e	; 30
     6ea:	88 23       	and	r24, r24
     6ec:	b1 f0       	breq	.+44     	; 0x71a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6ee:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6f2:	82 ff       	sbrs	r24, 2
     6f4:	f9 cf       	rjmp	.-14     	; 0x6e8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6f6:	80 91 e8 00 	lds	r24, 0x00E8
     6fa:	8b 77       	andi	r24, 0x7B	; 123
     6fc:	80 93 e8 00 	sts	0x00E8, r24
     700:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     702:	8e b3       	in	r24, 0x1e	; 30
     704:	88 23       	and	r24, r24
     706:	49 f0       	breq	.+18     	; 0x71a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     708:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     70c:	80 ff       	sbrs	r24, 0
     70e:	f9 cf       	rjmp	.-14     	; 0x702 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     710:	80 91 e8 00 	lds	r24, 0x00E8
     714:	8e 77       	andi	r24, 0x7E	; 126
     716:	80 93 e8 00 	sts	0x00E8, r24
     71a:	08 95       	ret

0000071c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     71c:	40 91 e4 00 	lds	r20, 0x00E4
     720:	50 91 e5 00 	lds	r21, 0x00E5
     724:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     726:	80 91 ec 00 	lds	r24, 0x00EC
     72a:	80 ff       	sbrs	r24, 0
     72c:	23 c0       	rjmp	.+70     	; 0x774 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     72e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     732:	80 fd       	sbrc	r24, 0
     734:	1d c0       	rjmp	.+58     	; 0x770 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     736:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     738:	88 23       	and	r24, r24
     73a:	11 f4       	brne	.+4      	; 0x740 <Endpoint_WaitUntilReady+0x24>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     740:	85 30       	cpi	r24, 0x05	; 5
     742:	11 f4       	brne	.+4      	; 0x748 <Endpoint_WaitUntilReady+0x2c>
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     748:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     74c:	85 ff       	sbrs	r24, 5
     74e:	02 c0       	rjmp	.+4      	; 0x754 <Endpoint_WaitUntilReady+0x38>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	08 95       	ret
     754:	80 91 e4 00 	lds	r24, 0x00E4
     758:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     75c:	84 17       	cp	r24, r20
     75e:	95 07       	cpc	r25, r21
     760:	11 f3       	breq	.-60     	; 0x726 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     762:	22 23       	and	r18, r18
     764:	11 f4       	brne	.+4      	; 0x76a <Endpoint_WaitUntilReady+0x4e>
     766:	84 e0       	ldi	r24, 0x04	; 4
     768:	08 95       	ret
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	ac 01       	movw	r20, r24
     76e:	db cf       	rjmp	.-74     	; 0x726 <Endpoint_WaitUntilReady+0xa>
     770:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     772:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     774:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     778:	82 ff       	sbrs	r24, 2
     77a:	dd cf       	rjmp	.-70     	; 0x736 <Endpoint_WaitUntilReady+0x1a>
     77c:	f9 cf       	rjmp	.-14     	; 0x770 <Endpoint_WaitUntilReady+0x54>

0000077e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     77e:	40 d0       	rcall	.+128    	; 0x800 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     780:	42 d0       	rcall	.+132    	; 0x806 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     782:	80 91 d8 00 	lds	r24, 0x00D8
     786:	8f 77       	andi	r24, 0x7F	; 127
     788:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     78c:	80 91 d8 00 	lds	r24, 0x00D8
     790:	80 68       	ori	r24, 0x80	; 128
     792:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     796:	80 91 d8 00 	lds	r24, 0x00D8
     79a:	8f 7d       	andi	r24, 0xDF	; 223
     79c:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7a8:	09 b4       	in	r0, 0x29	; 41
     7aa:	00 fe       	sbrs	r0, 0
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7ae:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     7b0:	10 92 80 02 	sts	0x0280, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7b4:	10 92 82 02 	sts	0x0282, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7b8:	10 92 81 02 	sts	0x0281, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	42 e0       	ldi	r20, 0x02	; 2
     7c2:	7a df       	rcall	.-268    	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7c4:	80 91 e1 00 	lds	r24, 0x00E1
     7c8:	8e 7f       	andi	r24, 0xFE	; 254
     7ca:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7ce:	80 91 e2 00 	lds	r24, 0x00E2
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7d8:	80 91 e2 00 	lds	r24, 0x00E2
     7dc:	88 60       	ori	r24, 0x08	; 8
     7de:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7e2:	80 91 e0 00 	lds	r24, 0x00E0
     7e6:	8e 7f       	andi	r24, 0xFE	; 254
     7e8:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7ec:	08 95       	ret

000007ee <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     7ee:	e3 e6       	ldi	r30, 0x63	; 99
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	8e 7f       	andi	r24, 0xFE	; 254
     7f6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 83 02 	sts	0x0283, r24

	USB_ResetInterface();
}
     7fe:	bf cf       	rjmp	.-130    	; 0x77e <USB_ResetInterface>

00000800 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     800:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     804:	08 95       	ret

00000806 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     806:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     80a:	08 95       	ret

0000080c <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	1f 93       	push	r17
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     830:	e9 ee       	ldi	r30, 0xE9	; 233
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	10 81       	ld	r17, Z
     836:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     838:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     83a:	e0 ef       	ldi	r30, 0xF0	; 240
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	87 7f       	andi	r24, 0xF7	; 247
     842:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     844:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     846:	7a d1       	rcall	.+756    	; 0xb3c <USB_Device_ProcessControlRequest>
     848:	a9 ee       	ldi	r26, 0xE9	; 233
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     84e:	e0 ef       	ldi	r30, 0xF0	; 240
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	88 60       	ori	r24, 0x08	; 8
     856:	80 83       	st	Z, r24
     858:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	1f 91       	pop	r17
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	1f 90       	pop	r1
     87c:	18 95       	reti

0000087e <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8a0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8a4:	82 ff       	sbrs	r24, 2
     8a6:	0a c0       	rjmp	.+20     	; 0x8bc <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8a8:	80 91 e2 00 	lds	r24, 0x00E2
     8ac:	82 ff       	sbrs	r24, 2
     8ae:	06 c0       	rjmp	.+12     	; 0x8bc <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8b0:	80 91 e1 00 	lds	r24, 0x00E1
     8b4:	8b 7f       	andi	r24, 0xFB	; 251
     8b6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8ba:	a9 d2       	rcall	.+1362   	; 0xe0e <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8bc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8c0:	80 ff       	sbrs	r24, 0
     8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8c4:	80 91 e2 00 	lds	r24, 0x00E2
     8c8:	80 ff       	sbrs	r24, 0
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8cc:	80 91 e2 00 	lds	r24, 0x00E2
     8d0:	8e 7f       	andi	r24, 0xFE	; 254
     8d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8d6:	80 91 e2 00 	lds	r24, 0x00E2
     8da:	80 61       	ori	r24, 0x10	; 16
     8dc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8e0:	80 91 d8 00 	lds	r24, 0x00D8
     8e4:	80 62       	ori	r24, 0x20	; 32
     8e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8ea:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8ec:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     8ee:	88 dc       	rcall	.-1776   	; 0x200 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8f0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8f4:	84 ff       	sbrs	r24, 4
     8f6:	2c c0       	rjmp	.+88     	; 0x950 <__vector_11+0xd2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8f8:	80 91 e2 00 	lds	r24, 0x00E2
     8fc:	84 ff       	sbrs	r24, 4
     8fe:	28 c0       	rjmp	.+80     	; 0x950 <__vector_11+0xd2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     908:	09 b4       	in	r0, 0x29	; 41
     90a:	00 fe       	sbrs	r0, 0
     90c:	fd cf       	rjmp	.-6      	; 0x908 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     90e:	80 91 d8 00 	lds	r24, 0x00D8
     912:	8f 7d       	andi	r24, 0xDF	; 223
     914:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     918:	80 91 e1 00 	lds	r24, 0x00E1
     91c:	8f 7e       	andi	r24, 0xEF	; 239
     91e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     922:	80 91 e2 00 	lds	r24, 0x00E2
     926:	8f 7e       	andi	r24, 0xEF	; 239
     928:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     92c:	80 91 e2 00 	lds	r24, 0x00E2
     930:	81 60       	ori	r24, 0x01	; 1
     932:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     936:	80 91 80 02 	lds	r24, 0x0280
     93a:	88 23       	and	r24, r24
     93c:	31 f4       	brne	.+12     	; 0x94a <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     93e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     942:	87 fd       	sbrc	r24, 7
     944:	02 c0       	rjmp	.+4      	; 0x94a <__vector_11+0xcc>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	01 c0       	rjmp	.+2      	; 0x94c <__vector_11+0xce>
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     94e:	51 dc       	rcall	.-1886   	; 0x1f2 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     950:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     954:	83 ff       	sbrs	r24, 3
     956:	26 c0       	rjmp	.+76     	; 0x9a4 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     958:	80 91 e2 00 	lds	r24, 0x00E2
     95c:	83 ff       	sbrs	r24, 3
     95e:	22 c0       	rjmp	.+68     	; 0x9a4 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     960:	80 91 e1 00 	lds	r24, 0x00E1
     964:	87 7f       	andi	r24, 0xF7	; 247
     966:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     96e:	10 92 80 02 	sts	0x0280, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     972:	80 91 e1 00 	lds	r24, 0x00E1
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     97c:	80 91 e2 00 	lds	r24, 0x00E2
     980:	8e 7f       	andi	r24, 0xFE	; 254
     982:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     986:	80 91 e2 00 	lds	r24, 0x00E2
     98a:	80 61       	ori	r24, 0x10	; 16
     98c:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	42 e0       	ldi	r20, 0x02	; 2
     996:	90 de       	rcall	.-736    	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     998:	80 91 f0 00 	lds	r24, 0x00F0
     99c:	88 60       	ori	r24, 0x08	; 8
     99e:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9a2:	35 d2       	rcall	.+1130   	; 0xe0e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <Endpoint_Write_Control_Stream_LE>:
     9c6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9c8:	40 91 8a 02 	lds	r20, 0x028A
     9cc:	50 91 8b 02 	lds	r21, 0x028B
     9d0:	46 17       	cp	r20, r22
     9d2:	57 07       	cpc	r21, r23
     9d4:	18 f4       	brcc	.+6      	; 0x9dc <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9d6:	f9 01       	movw	r30, r18
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	3c c0       	rjmp	.+120    	; 0xa54 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9dc:	61 15       	cp	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <Endpoint_Write_Control_Stream_LE+0x20>
     9e2:	ab 01       	movw	r20, r22
     9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e6:	80 91 e8 00 	lds	r24, 0x00E8
     9ea:	8e 77       	andi	r24, 0x7E	; 126
     9ec:	80 93 e8 00 	sts	0x00E8, r24
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	f0 cf       	rjmp	.-32     	; 0x9d6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9f6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9f8:	88 23       	and	r24, r24
     9fa:	e9 f1       	breq	.+122    	; 0xa76 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9fc:	85 30       	cpi	r24, 0x05	; 5
     9fe:	e9 f1       	breq	.+122    	; 0xa7a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a00:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a04:	83 ff       	sbrs	r24, 3
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <Endpoint_Write_Control_Stream_LE+0x46>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a10:	82 fd       	sbrc	r24, 2
     a12:	2b c0       	rjmp	.+86     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a14:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a18:	80 ff       	sbrs	r24, 0
     a1a:	1c c0       	rjmp	.+56     	; 0xa54 <Endpoint_Write_Control_Stream_LE+0x8e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a1c:	80 91 f2 00 	lds	r24, 0x00F2
     a20:	28 2f       	mov	r18, r24
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	07 c0       	rjmp	.+14     	; 0xa34 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a26:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a28:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a2c:	41 50       	subi	r20, 0x01	; 1
     a2e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a34:	41 15       	cp	r20, r1
     a36:	51 05       	cpc	r21, r1
     a38:	19 f0       	breq	.+6      	; 0xa40 <Endpoint_Write_Control_Stream_LE+0x7a>
     a3a:	28 30       	cpi	r18, 0x08	; 8
     a3c:	31 05       	cpc	r19, r1
     a3e:	98 f3       	brcs	.-26     	; 0xa26 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	28 30       	cpi	r18, 0x08	; 8
     a44:	31 05       	cpc	r19, r1
     a46:	09 f4       	brne	.+2      	; 0xa4a <Endpoint_Write_Control_Stream_LE+0x84>
     a48:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a4a:	80 91 e8 00 	lds	r24, 0x00E8
     a4e:	8e 77       	andi	r24, 0x7E	; 126
     a50:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a54:	41 15       	cp	r20, r1
     a56:	51 05       	cpc	r21, r1
     a58:	71 f6       	brne	.-100    	; 0x9f6 <Endpoint_Write_Control_Stream_LE+0x30>
     a5a:	99 23       	and	r25, r25
     a5c:	61 f6       	brne	.-104    	; 0x9f6 <Endpoint_Write_Control_Stream_LE+0x30>
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a60:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a62:	88 23       	and	r24, r24
     a64:	41 f0       	breq	.+16     	; 0xa76 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a66:	85 30       	cpi	r24, 0x05	; 5
     a68:	41 f0       	breq	.+16     	; 0xa7a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a6a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a6e:	82 ff       	sbrs	r24, 2
     a70:	f7 cf       	rjmp	.-18     	; 0xa60 <Endpoint_Write_Control_Stream_LE+0x9a>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	08 95       	ret
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	08 95       	ret
     a7a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a7c:	08 95       	ret

00000a7e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     a7e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a80:	40 91 8a 02 	lds	r20, 0x028A
     a84:	50 91 8b 02 	lds	r21, 0x028B
     a88:	46 17       	cp	r20, r22
     a8a:	57 07       	cpc	r21, r23
     a8c:	18 f4       	brcc	.+6      	; 0xa94 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a8e:	f9 01       	movw	r30, r18
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	3f c0       	rjmp	.+126    	; 0xb12 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a94:	61 15       	cp	r22, r1
     a96:	71 05       	cpc	r23, r1
     a98:	11 f0       	breq	.+4      	; 0xa9e <Endpoint_Write_Control_PStream_LE+0x20>
     a9a:	ab 01       	movw	r20, r22
     a9c:	f8 cf       	rjmp	.-16     	; 0xa8e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9e:	80 91 e8 00 	lds	r24, 0x00E8
     aa2:	8e 77       	andi	r24, 0x7E	; 126
     aa4:	80 93 e8 00 	sts	0x00E8, r24
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	f0 cf       	rjmp	.-32     	; 0xa8e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aae:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <Endpoint_Write_Control_PStream_LE+0x38>
     ab4:	3f c0       	rjmp	.+126    	; 0xb34 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab6:	85 30       	cpi	r24, 0x05	; 5
     ab8:	09 f4       	brne	.+2      	; 0xabc <Endpoint_Write_Control_PStream_LE+0x3e>
     aba:	3e c0       	rjmp	.+124    	; 0xb38 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     abc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ac0:	83 ff       	sbrs	r24, 3
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <Endpoint_Write_Control_PStream_LE+0x4a>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ac8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     acc:	82 fd       	sbrc	r24, 2
     ace:	2c c0       	rjmp	.+88     	; 0xb28 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ad0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	1d c0       	rjmp	.+58     	; 0xb12 <Endpoint_Write_Control_PStream_LE+0x94>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ad8:	80 91 f2 00 	lds	r24, 0x00F2
     adc:	28 2f       	mov	r18, r24
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ae2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ae4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ae8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     aea:	41 50       	subi	r20, 0x01	; 1
     aec:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     af2:	41 15       	cp	r20, r1
     af4:	51 05       	cpc	r21, r1
     af6:	19 f0       	breq	.+6      	; 0xafe <Endpoint_Write_Control_PStream_LE+0x80>
     af8:	28 30       	cpi	r18, 0x08	; 8
     afa:	31 05       	cpc	r19, r1
     afc:	90 f3       	brcs	.-28     	; 0xae2 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	28 30       	cpi	r18, 0x08	; 8
     b02:	31 05       	cpc	r19, r1
     b04:	09 f4       	brne	.+2      	; 0xb08 <Endpoint_Write_Control_PStream_LE+0x8a>
     b06:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b08:	80 91 e8 00 	lds	r24, 0x00E8
     b0c:	8e 77       	andi	r24, 0x7E	; 126
     b0e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b12:	41 15       	cp	r20, r1
     b14:	51 05       	cpc	r21, r1
     b16:	59 f6       	brne	.-106    	; 0xaae <Endpoint_Write_Control_PStream_LE+0x30>
     b18:	99 23       	and	r25, r25
     b1a:	49 f6       	brne	.-110    	; 0xaae <Endpoint_Write_Control_PStream_LE+0x30>
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b1e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b20:	88 23       	and	r24, r24
     b22:	41 f0       	breq	.+16     	; 0xb34 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b24:	85 30       	cpi	r24, 0x05	; 5
     b26:	41 f0       	breq	.+16     	; 0xb38 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b28:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b2c:	82 ff       	sbrs	r24, 2
     b2e:	f7 cf       	rjmp	.-18     	; 0xb1e <Endpoint_Write_Control_PStream_LE+0xa0>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	08 95       	ret
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	08 95       	ret
     b38:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b3a:	08 95       	ret

00000b3c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	ac 97       	sbiw	r28, 0x2c	; 44
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	e4 e8       	ldi	r30, 0x84	; 132
     b56:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b58:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b5c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b5e:	22 e0       	ldi	r18, 0x02	; 2
     b60:	ec 38       	cpi	r30, 0x8C	; 140
     b62:	f2 07       	cpc	r31, r18
     b64:	c9 f7       	brne	.-14     	; 0xb58 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b66:	5c db       	rcall	.-2376   	; 0x220 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b68:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b6c:	83 ff       	sbrs	r24, 3
     b6e:	36 c1       	rjmp	.+620    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b70:	80 91 84 02 	lds	r24, 0x0284

		switch (USB_ControlRequest.bRequest)
     b74:	30 91 85 02 	lds	r19, 0x0285
     b78:	35 30       	cpi	r19, 0x05	; 5
     b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x42>
     b7c:	87 c0       	rjmp	.+270    	; 0xc8c <USB_Device_ProcessControlRequest+0x150>
     b7e:	36 30       	cpi	r19, 0x06	; 6
     b80:	40 f4       	brcc	.+16     	; 0xb92 <USB_Device_ProcessControlRequest+0x56>
     b82:	31 30       	cpi	r19, 0x01	; 1
     b84:	c9 f1       	breq	.+114    	; 0xbf8 <USB_Device_ProcessControlRequest+0xbc>
     b86:	31 30       	cpi	r19, 0x01	; 1
     b88:	70 f0       	brcs	.+28     	; 0xba6 <USB_Device_ProcessControlRequest+0x6a>
     b8a:	33 30       	cpi	r19, 0x03	; 3
     b8c:	09 f0       	breq	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0x54>
     b8e:	26 c1       	rjmp	.+588    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
     b90:	33 c0       	rjmp	.+102    	; 0xbf8 <USB_Device_ProcessControlRequest+0xbc>
     b92:	38 30       	cpi	r19, 0x08	; 8
     b94:	09 f4       	brne	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x5c>
     b96:	f5 c0       	rjmp	.+490    	; 0xd82 <USB_Device_ProcessControlRequest+0x246>
     b98:	39 30       	cpi	r19, 0x09	; 9
     b9a:	09 f4       	brne	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x62>
     b9c:	04 c1       	rjmp	.+520    	; 0xda6 <USB_Device_ProcessControlRequest+0x26a>
     b9e:	36 30       	cpi	r19, 0x06	; 6
     ba0:	09 f0       	breq	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x68>
     ba2:	1c c1       	rjmp	.+568    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
     ba4:	96 c0       	rjmp	.+300    	; 0xcd2 <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ba6:	80 38       	cpi	r24, 0x80	; 128
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <USB_Device_ProcessControlRequest+0x76>
     baa:	82 38       	cpi	r24, 0x82	; 130
     bac:	09 f0       	breq	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0x74>
     bae:	16 c1       	rjmp	.+556    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
     bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <USB_Device_ProcessControlRequest+0x86>
     bb2:	90 91 81 02 	lds	r25, 0x0281
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     bb6:	80 91 82 02 	lds	r24, 0x0282
     bba:	88 23       	and	r24, r24
     bbc:	99 f0       	breq	.+38     	; 0xbe4 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     bbe:	92 60       	ori	r25, 0x02	; 2
     bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bc2:	80 91 88 02 	lds	r24, 0x0288
     bc6:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bc8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bcc:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	25 e0       	ldi	r18, 0x05	; 5
     bd4:	96 95       	lsr	r25
     bd6:	87 95       	ror	r24
     bd8:	2a 95       	dec	r18
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <USB_Device_ProcessControlRequest+0x98>
     bdc:	98 2f       	mov	r25, r24
     bde:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     be0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     be4:	80 91 e8 00 	lds	r24, 0x00E8
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bee:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     bf2:	10 92 f1 00 	sts	0x00F1, r1
     bf6:	d0 c0       	rjmp	.+416    	; 0xd98 <USB_Device_ProcessControlRequest+0x25c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf8:	88 23       	and	r24, r24
     bfa:	19 f0       	breq	.+6      	; 0xc02 <USB_Device_ProcessControlRequest+0xc6>
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	09 f0       	breq	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0xc6>
     c00:	ed c0       	rjmp	.+474    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	8f 71       	andi	r24, 0x1F	; 31
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	21 f0       	breq	.+8      	; 0xc14 <USB_Device_ProcessControlRequest+0xd8>
     c0c:	02 97       	sbiw	r24, 0x02	; 2
     c0e:	09 f0       	breq	.+2      	; 0xc12 <USB_Device_ProcessControlRequest+0xd6>
     c10:	e5 c0       	rjmp	.+458    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c14:	80 91 86 02 	lds	r24, 0x0286
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <USB_Device_ProcessControlRequest+0xe2>
     c1c:	df c0       	rjmp	.+446    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c1e:	10 92 82 02 	sts	0x0282, r1
     c22:	33 30       	cpi	r19, 0x03	; 3
     c24:	69 f5       	brne	.+90     	; 0xc80 <USB_Device_ProcessControlRequest+0x144>
     c26:	80 93 82 02 	sts	0x0282, r24
     c2a:	2a c0       	rjmp	.+84     	; 0xc80 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c2c:	80 91 86 02 	lds	r24, 0x0286
     c30:	88 23       	and	r24, r24
     c32:	31 f5       	brne	.+76     	; 0xc80 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c34:	20 91 88 02 	lds	r18, 0x0288
     c38:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c3a:	09 f4       	brne	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0x102>
     c3c:	cf c0       	rjmp	.+414    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c3e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c42:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c46:	80 ff       	sbrs	r24, 0
     c48:	1b c0       	rjmp	.+54     	; 0xc80 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c4a:	33 30       	cpi	r19, 0x03	; 3
     c4c:	21 f4       	brne	.+8      	; 0xc56 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c4e:	80 91 eb 00 	lds	r24, 0x00EB
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	13 c0       	rjmp	.+38     	; 0xc7c <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c56:	80 91 eb 00 	lds	r24, 0x00EB
     c5a:	80 61       	ori	r24, 0x10	; 16
     c5c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <USB_Device_ProcessControlRequest+0x12e>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	2a 95       	dec	r18
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <USB_Device_ProcessControlRequest+0x12a>
     c6e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c72:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c76:	80 91 eb 00 	lds	r24, 0x00EB
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c80:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c84:	80 91 e8 00 	lds	r24, 0x00E8
     c88:	87 7f       	andi	r24, 0xF7	; 247
     c8a:	89 c0       	rjmp	.+274    	; 0xd9e <USB_Device_ProcessControlRequest+0x262>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c8c:	88 23       	and	r24, r24
     c8e:	09 f0       	breq	.+2      	; 0xc92 <USB_Device_ProcessControlRequest+0x156>
     c90:	a5 c0       	rjmp	.+330    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     c92:	10 91 86 02 	lds	r17, 0x0286
     c96:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c98:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c9a:	f8 94       	cli
     c9c:	80 91 e8 00 	lds	r24, 0x00E8
     ca0:	87 7f       	andi	r24, 0xF7	; 247
     ca2:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ca6:	1b dd       	rcall	.-1482   	; 0x6de <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ca8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     cac:	80 ff       	sbrs	r24, 0
     cae:	fc cf       	rjmp	.-8      	; 0xca8 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cb0:	80 91 e3 00 	lds	r24, 0x00E3
     cb4:	80 78       	andi	r24, 0x80	; 128
     cb6:	81 2b       	or	r24, r17

				UDADDR = Temp;
     cb8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     cc2:	11 23       	and	r17, r17
     cc4:	11 f4       	brne	.+4      	; 0xcca <USB_Device_ProcessControlRequest+0x18e>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <USB_Device_ProcessControlRequest+0x190>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     cce:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     cd0:	85 c0       	rjmp	.+266    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cd2:	80 58       	subi	r24, 0x80	; 128
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	08 f0       	brcs	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0x19e>
     cd8:	81 c0       	rjmp	.+258    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cda:	80 91 86 02 	lds	r24, 0x0286
     cde:	90 91 87 02 	lds	r25, 0x0287
     ce2:	23 e0       	ldi	r18, 0x03	; 3
     ce4:	8c 3d       	cpi	r24, 0xDC	; 220
     ce6:	92 07       	cpc	r25, r18
     ce8:	09 f0       	breq	.+2      	; 0xcec <USB_Device_ProcessControlRequest+0x1b0>
     cea:	33 c0       	rjmp	.+102    	; 0xd52 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cf0:	8a e2       	ldi	r24, 0x2A	; 42
     cf2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cf4:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cf6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cf8:	de 01       	movw	r26, r28
     cfa:	15 96       	adiw	r26, 0x05	; 5
     cfc:	6e e0       	ldi	r22, 0x0E	; 14
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d02:	11 e2       	ldi	r17, 0x21	; 33
     d04:	e6 2f       	mov	r30, r22
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	10 93 57 00 	sts	0x0057, r17
     d0c:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     d0e:	40 ff       	sbrs	r20, 0
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     d16:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d1e:	8a 30       	cpi	r24, 0x0A	; 10
     d20:	18 f0       	brcs	.+6      	; 0xd28 <USB_Device_ProcessControlRequest+0x1ec>
     d22:	c9 01       	movw	r24, r18
     d24:	c7 96       	adiw	r24, 0x37	; 55
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <USB_Device_ProcessControlRequest+0x1f0>
     d28:	c9 01       	movw	r24, r18
     d2a:	c0 96       	adiw	r24, 0x30	; 48
     d2c:	8d 93       	st	X+, r24
     d2e:	9d 93       	st	X+, r25
     d30:	4f 5f       	subi	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d34:	44 31       	cpi	r20, 0x14	; 20
     d36:	51 05       	cpc	r21, r1
     d38:	29 f7       	brne	.-54     	; 0xd04 <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d3a:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d3c:	80 91 e8 00 	lds	r24, 0x00E8
     d40:	87 7f       	andi	r24, 0xF7	; 247
     d42:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d46:	ce 01       	movw	r24, r28
     d48:	03 96       	adiw	r24, 0x03	; 3
     d4a:	6a e2       	ldi	r22, 0x2A	; 42
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	3b de       	rcall	.-906    	; 0x9c6 <Endpoint_Write_Control_Stream_LE>
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <USB_Device_ProcessControlRequest+0x23a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d52:	60 91 88 02 	lds	r22, 0x0288
     d56:	ae 01       	movw	r20, r28
     d58:	4f 5f       	subi	r20, 0xFF	; 255
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	7f dc       	rcall	.-1794   	; 0x65c <CALLBACK_USB_GetDescriptor>
     d5e:	bc 01       	movw	r22, r24
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	09 f4       	brne	.+2      	; 0xd66 <USB_Device_ProcessControlRequest+0x22a>
     d64:	3b c0       	rjmp	.+118    	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
     d66:	80 91 e8 00 	lds	r24, 0x00E8
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	84 de       	rcall	.-760    	; 0xa7e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d76:	80 91 e8 00 	lds	r24, 0x00E8
     d7a:	8b 77       	andi	r24, 0x7B	; 123
     d7c:	80 93 e8 00 	sts	0x00E8, r24
     d80:	2d c0       	rjmp	.+90     	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d82:	80 38       	cpi	r24, 0x80	; 128
     d84:	59 f5       	brne	.+86     	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d86:	80 91 e8 00 	lds	r24, 0x00E8
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d90:	80 91 80 02 	lds	r24, 0x0280
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d94:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d98:	80 91 e8 00 	lds	r24, 0x00E8
     d9c:	8e 77       	andi	r24, 0x7E	; 126
     d9e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     da2:	9d dc       	rcall	.-1734   	; 0x6de <Endpoint_ClearStatusStage>
     da4:	1b c0       	rjmp	.+54     	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     da6:	88 23       	and	r24, r24
     da8:	c9 f4       	brne	.+50     	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     daa:	90 91 86 02 	lds	r25, 0x0286
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	a8 f4       	brcc	.+42     	; 0xddc <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     dbc:	90 93 80 02 	sts	0x0280, r25

	Endpoint_ClearStatusStage();
     dc0:	8e dc       	rcall	.-1764   	; 0x6de <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     dc2:	80 91 80 02 	lds	r24, 0x0280
     dc6:	88 23       	and	r24, r24
     dc8:	31 f4       	brne	.+12     	; 0xdd6 <USB_Device_ProcessControlRequest+0x29a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     dca:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dce:	87 fd       	sbrc	r24, 7
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <USB_Device_ProcessControlRequest+0x29a>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <USB_Device_ProcessControlRequest+0x29c>
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     dda:	25 da       	rcall	.-2998   	; 0x226 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ddc:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     de0:	83 ff       	sbrs	r24, 3
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     de4:	80 91 eb 00 	lds	r24, 0x00EB
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dee:	80 91 e8 00 	lds	r24, 0x00E8
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     df8:	ac 96       	adiw	r28, 0x2c	; 44
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e0e:	08 95       	ret

00000e10 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e10:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     e12:	8e b3       	in	r24, 0x1e	; 30
     e14:	88 23       	and	r24, r24
     e16:	61 f0       	breq	.+24     	; 0xe30 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     e18:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e1c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e20:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     e24:	83 ff       	sbrs	r24, 3
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
     e28:	89 de       	rcall	.-750    	; 0xb3c <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     e2a:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e2c:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     e30:	1f 91       	pop	r17
     e32:	08 95       	ret

00000e34 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     e34:	08 95       	ret

00000e36 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e36:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e38:	8e b3       	in	r24, 0x1e	; 30
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	11 f5       	brne	.+68     	; 0xe82 <CDC_Device_Flush+0x4c>
     e3e:	81 89       	ldd	r24, Z+17	; 0x11
     e40:	92 89       	ldd	r25, Z+18	; 0x12
     e42:	a3 89       	ldd	r26, Z+19	; 0x13
     e44:	b4 89       	ldd	r27, Z+20	; 0x14
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	a1 05       	cpc	r26, r1
     e4a:	b1 05       	cpc	r27, r1
     e4c:	d1 f0       	breq	.+52     	; 0xe82 <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e50:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e54:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
     e58:	88 23       	and	r24, r24
     e5a:	a9 f0       	breq	.+42     	; 0xe86 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e5c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e60:	80 91 e8 00 	lds	r24, 0x00E8
     e64:	8e 77       	andi	r24, 0x7E	; 126
     e66:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e6a:	95 fd       	sbrc	r25, 5
     e6c:	0c c0       	rjmp	.+24     	; 0xe86 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e6e:	56 dc       	rcall	.-1876   	; 0x71c <Endpoint_WaitUntilReady>
     e70:	98 2f       	mov	r25, r24
     e72:	88 23       	and	r24, r24
     e74:	49 f4       	brne	.+18     	; 0xe88 <CDC_Device_Flush+0x52>
     e76:	80 91 e8 00 	lds	r24, 0x00E8
     e7a:	8e 77       	andi	r24, 0x7E	; 126
     e7c:	80 93 e8 00 	sts	0x00E8, r24
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <CDC_Device_Flush+0x52>
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <CDC_Device_Flush+0x52>
     e86:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e88:	89 2f       	mov	r24, r25
     e8a:	08 95       	ret

00000e8c <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e8c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e8e:	8e b3       	in	r24, 0x1e	; 30
     e90:	84 30       	cpi	r24, 0x04	; 4
     e92:	51 f4       	brne	.+20     	; 0xea8 <CDC_Device_USBTask+0x1c>
     e94:	81 89       	ldd	r24, Z+17	; 0x11
     e96:	92 89       	ldd	r25, Z+18	; 0x12
     e98:	a3 89       	ldd	r26, Z+19	; 0x13
     e9a:	b4 89       	ldd	r27, Z+20	; 0x14
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	a1 05       	cpc	r26, r1
     ea0:	b1 05       	cpc	r27, r1
     ea2:	11 f0       	breq	.+4      	; 0xea8 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     ea4:	cf 01       	movw	r24, r30
     ea6:	c7 cf       	rjmp	.-114    	; 0xe36 <CDC_Device_Flush>
     ea8:	08 95       	ret

00000eaa <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     eaa:	1f 93       	push	r17
     eac:	fc 01       	movw	r30, r24
     eae:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     eb0:	8e b3       	in	r24, 0x1e	; 30
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	d9 f4       	brne	.+54     	; 0xeec <CDC_Device_SendByte+0x42>
     eb6:	81 89       	ldd	r24, Z+17	; 0x11
     eb8:	92 89       	ldd	r25, Z+18	; 0x12
     eba:	a3 89       	ldd	r26, Z+19	; 0x13
     ebc:	b4 89       	ldd	r27, Z+20	; 0x14
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	a1 05       	cpc	r26, r1
     ec2:	b1 05       	cpc	r27, r1
     ec4:	99 f0       	breq	.+38     	; 0xeec <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ec8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ecc:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     ed0:	85 fd       	sbrc	r24, 5
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
     ed8:	8e 77       	andi	r24, 0x7E	; 126
     eda:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ede:	1e dc       	rcall	.-1988   	; 0x71c <Endpoint_WaitUntilReady>
     ee0:	88 23       	and	r24, r24
     ee2:	29 f4       	brne	.+10     	; 0xeee <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ee4:	10 93 f1 00 	sts	0x00F1, r17
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	01 c0       	rjmp	.+2      	; 0xeee <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     eec:	82 e0       	ldi	r24, 0x02	; 2
}
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     efa:	0d 96       	adiw	r24, 0x0d	; 13
     efc:	fc 01       	movw	r30, r24
     efe:	8b e0       	ldi	r24, 0x0B	; 11
     f00:	df 01       	movw	r26, r30
     f02:	1d 92       	st	X+, r1
     f04:	8a 95       	dec	r24
     f06:	e9 f7       	brne	.-6      	; 0xf02 <CDC_Device_ConfigureEndpoints+0x10>
     f08:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	18 17       	cp	r17, r24
     f0e:	29 f4       	brne	.+10     	; 0xf1a <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     f10:	6a 81       	ldd	r22, Y+2	; 0x02
     f12:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	52 e0       	ldi	r21, 0x02	; 2
     f18:	10 c0       	rjmp	.+32     	; 0xf3a <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	18 17       	cp	r17, r24
     f1e:	31 f4       	brne	.+12     	; 0xf2c <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     f20:	6e 81       	ldd	r22, Y+6	; 0x06
     f22:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	52 e0       	ldi	r21, 0x02	; 2
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     f2c:	89 85       	ldd	r24, Y+9	; 0x09
     f2e:	18 17       	cp	r17, r24
     f30:	39 f5       	brne	.+78     	; 0xf80 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     f32:	6a 85       	ldd	r22, Y+10	; 0x0a
     f34:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     f36:	8c 85       	ldd	r24, Y+12	; 0x0c
     f38:	53 e0       	ldi	r21, 0x03	; 3
     f3a:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     f3c:	88 23       	and	r24, r24
     f3e:	11 f4       	brne	.+4      	; 0xf44 <CDC_Device_ConfigureEndpoints+0x52>
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <CDC_Device_ConfigureEndpoints+0x54>
     f44:	44 e0       	ldi	r20, 0x04	; 4
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	88 e0       	ldi	r24, 0x08	; 8
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     f54:	86 17       	cp	r24, r22
     f56:	97 07       	cpc	r25, r23
     f58:	d0 f3       	brcs	.-12     	; 0xf4e <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f5a:	85 2f       	mov	r24, r21
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	56 e0       	ldi	r21, 0x06	; 6
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	5a 95       	dec	r21
     f66:	e1 f7       	brne	.-8      	; 0xf60 <CDC_Device_ConfigureEndpoints+0x6e>
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	31 11       	cpse	r19, r1
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	68 2b       	or	r22, r24
     f70:	42 60       	ori	r20, 0x02	; 2
     f72:	22 95       	swap	r18
     f74:	20 7f       	andi	r18, 0xF0	; 240
     f76:	42 2b       	or	r20, r18
     f78:	81 2f       	mov	r24, r17
     f7a:	9e db       	rcall	.-2244   	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv>
     f7c:	88 23       	and	r24, r24
     f7e:	29 f0       	breq	.+10     	; 0xf8a <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     f80:	1f 5f       	subi	r17, 0xFF	; 255
     f82:	15 30       	cpi	r17, 0x05	; 5
     f84:	09 f0       	breq	.+2      	; 0xf88 <CDC_Device_ConfigureEndpoints+0x96>
     f86:	c1 cf       	rjmp	.-126    	; 0xf0a <CDC_Device_ConfigureEndpoints+0x18>
     f88:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f98:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f9c:	83 ff       	sbrs	r24, 3
     f9e:	9d c0       	rjmp	.+314    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     fa0:	88 81       	ld	r24, Y
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	20 91 88 02 	lds	r18, 0x0288
     fa8:	30 91 89 02 	lds	r19, 0x0289
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <CDC_Device_ProcessControlRequest+0x22>
     fb2:	93 c0       	rjmp	.+294    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
	  return;

	switch (USB_ControlRequest.bRequest)
     fb4:	80 91 85 02 	lds	r24, 0x0285
     fb8:	81 32       	cpi	r24, 0x21	; 33
     fba:	69 f0       	breq	.+26     	; 0xfd6 <CDC_Device_ProcessControlRequest+0x44>
     fbc:	82 32       	cpi	r24, 0x22	; 34
     fbe:	20 f4       	brcc	.+8      	; 0xfc8 <CDC_Device_ProcessControlRequest+0x36>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <CDC_Device_ProcessControlRequest+0x34>
     fc4:	8a c0       	rjmp	.+276    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
     fc6:	3c c0       	rjmp	.+120    	; 0x1040 <CDC_Device_ProcessControlRequest+0xae>
     fc8:	82 32       	cpi	r24, 0x22	; 34
     fca:	09 f4       	brne	.+2      	; 0xfce <CDC_Device_ProcessControlRequest+0x3c>
     fcc:	65 c0       	rjmp	.+202    	; 0x1098 <CDC_Device_ProcessControlRequest+0x106>
     fce:	83 32       	cpi	r24, 0x23	; 35
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <CDC_Device_ProcessControlRequest+0x42>
     fd2:	83 c0       	rjmp	.+262    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
     fd4:	74 c0       	rjmp	.+232    	; 0x10be <CDC_Device_ProcessControlRequest+0x12c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fd6:	80 91 84 02 	lds	r24, 0x0284
     fda:	81 3a       	cpi	r24, 0xA1	; 161
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <CDC_Device_ProcessControlRequest+0x4e>
     fde:	7d c0       	rjmp	.+250    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe0:	80 91 e8 00 	lds	r24, 0x00E8
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fea:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     fee:	80 ff       	sbrs	r24, 0
     ff0:	fc cf       	rjmp	.-8      	; 0xfea <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     ff2:	89 89       	ldd	r24, Y+17	; 0x11
     ff4:	9a 89       	ldd	r25, Y+18	; 0x12
     ff6:	ab 89       	ldd	r26, Y+19	; 0x13
     ff8:	bc 89       	ldd	r27, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ffa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ffe:	29 2f       	mov	r18, r25
    1000:	3a 2f       	mov	r19, r26
    1002:	4b 2f       	mov	r20, r27
    1004:	55 27       	eor	r21, r21
    1006:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    100a:	9d 01       	movw	r18, r26
    100c:	44 27       	eor	r20, r20
    100e:	55 27       	eor	r21, r21
    1010:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    1014:	8b 2f       	mov	r24, r27
    1016:	99 27       	eor	r25, r25
    1018:	aa 27       	eor	r26, r26
    101a:	bb 27       	eor	r27, r27
    101c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1020:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1022:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1026:	8e 89       	ldd	r24, Y+22	; 0x16
    1028:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1032:	80 91 e8 00 	lds	r24, 0x00E8
    1036:	8e 77       	andi	r24, 0x7E	; 126
    1038:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    103c:	50 db       	rcall	.-2400   	; 0x6de <Endpoint_ClearStatusStage>
    103e:	4d c0       	rjmp	.+154    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1040:	80 91 84 02 	lds	r24, 0x0284
    1044:	81 32       	cpi	r24, 0x21	; 33
    1046:	09 f0       	breq	.+2      	; 0x104a <CDC_Device_ProcessControlRequest+0xb8>
    1048:	48 c0       	rjmp	.+144    	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    104a:	80 91 e8 00 	lds	r24, 0x00E8
    104e:	87 7f       	andi	r24, 0xF7	; 247
    1050:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1054:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
    1058:	82 ff       	sbrs	r24, 2
    105a:	fc cf       	rjmp	.-8      	; 0x1054 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    105c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1060:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1064:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    1068:	30 91 f1 00 	lds	r19, 0x00F1

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    106c:	89 8b       	std	Y+17, r24	; 0x11
    106e:	9a 8b       	std	Y+18, r25	; 0x12
    1070:	2b 8b       	std	Y+19, r18	; 0x13
    1072:	3c 8b       	std	Y+20, r19	; 0x14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1074:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1078:	8d 8b       	std	Y+21, r24	; 0x15
    107a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    107e:	8e 8b       	std	Y+22, r24	; 0x16
    1080:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1084:	8f 8b       	std	Y+23, r24	; 0x17
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1086:	80 91 e8 00 	lds	r24, 0x00E8
    108a:	8b 77       	andi	r24, 0x7B	; 123
    108c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1090:	26 db       	rcall	.-2484   	; 0x6de <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1092:	ce 01       	movw	r24, r28
    1094:	c4 d8       	rcall	.-3704   	; 0x21e <EVENT_CDC_Device_LineEncodingChanged>
    1096:	21 c0       	rjmp	.+66     	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1098:	80 91 84 02 	lds	r24, 0x0284
    109c:	81 32       	cpi	r24, 0x21	; 33
    109e:	e9 f4       	brne	.+58     	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a0:	80 91 e8 00 	lds	r24, 0x00E8
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10aa:	19 db       	rcall	.-2510   	; 0x6de <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    10ac:	80 91 86 02 	lds	r24, 0x0286
    10b0:	90 91 87 02 	lds	r25, 0x0287
    10b4:	9e 87       	std	Y+14, r25	; 0x0e
    10b6:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    10b8:	ce 01       	movw	r24, r28
    10ba:	bc de       	rcall	.-648    	; 0xe34 <CDC_Device_Event_Stub>
    10bc:	0e c0       	rjmp	.+28     	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10be:	80 91 84 02 	lds	r24, 0x0284
    10c2:	81 32       	cpi	r24, 0x21	; 33
    10c4:	51 f4       	brne	.+20     	; 0x10da <CDC_Device_ProcessControlRequest+0x148>
    10c6:	80 91 e8 00 	lds	r24, 0x00E8
    10ca:	87 7f       	andi	r24, 0xF7	; 247
    10cc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    10d0:	06 db       	rcall	.-2548   	; 0x6de <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    10d2:	ce 01       	movw	r24, r28
    10d4:	60 91 86 02 	lds	r22, 0x0286
    10d8:	ad de       	rcall	.-678    	; 0xe34 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <__udivmodsi4>:
    10e0:	a1 e2       	ldi	r26, 0x21	; 33
    10e2:	1a 2e       	mov	r1, r26
    10e4:	aa 1b       	sub	r26, r26
    10e6:	bb 1b       	sub	r27, r27
    10e8:	fd 01       	movw	r30, r26
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <__udivmodsi4_ep>

000010ec <__udivmodsi4_loop>:
    10ec:	aa 1f       	adc	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	ee 1f       	adc	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	a2 17       	cp	r26, r18
    10f6:	b3 07       	cpc	r27, r19
    10f8:	e4 07       	cpc	r30, r20
    10fa:	f5 07       	cpc	r31, r21
    10fc:	20 f0       	brcs	.+8      	; 0x1106 <__udivmodsi4_ep>
    10fe:	a2 1b       	sub	r26, r18
    1100:	b3 0b       	sbc	r27, r19
    1102:	e4 0b       	sbc	r30, r20
    1104:	f5 0b       	sbc	r31, r21

00001106 <__udivmodsi4_ep>:
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	1a 94       	dec	r1
    1110:	69 f7       	brne	.-38     	; 0x10ec <__udivmodsi4_loop>
    1112:	60 95       	com	r22
    1114:	70 95       	com	r23
    1116:	80 95       	com	r24
    1118:	90 95       	com	r25
    111a:	9b 01       	movw	r18, r22
    111c:	ac 01       	movw	r20, r24
    111e:	bd 01       	movw	r22, r26
    1120:	cf 01       	movw	r24, r30
    1122:	08 95       	ret

00001124 <__divmodsi4>:
    1124:	97 fb       	bst	r25, 7
    1126:	09 2e       	mov	r0, r25
    1128:	05 26       	eor	r0, r21
    112a:	0e d0       	rcall	.+28     	; 0x1148 <__divmodsi4_neg1>
    112c:	57 fd       	sbrc	r21, 7
    112e:	04 d0       	rcall	.+8      	; 0x1138 <__divmodsi4_neg2>
    1130:	d7 df       	rcall	.-82     	; 0x10e0 <__udivmodsi4>
    1132:	0a d0       	rcall	.+20     	; 0x1148 <__divmodsi4_neg1>
    1134:	00 1c       	adc	r0, r0
    1136:	38 f4       	brcc	.+14     	; 0x1146 <__divmodsi4_exit>

00001138 <__divmodsi4_neg2>:
    1138:	50 95       	com	r21
    113a:	40 95       	com	r20
    113c:	30 95       	com	r19
    113e:	21 95       	neg	r18
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f 4f       	sbci	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255

00001146 <__divmodsi4_exit>:
    1146:	08 95       	ret

00001148 <__divmodsi4_neg1>:
    1148:	f6 f7       	brtc	.-4      	; 0x1146 <__divmodsi4_exit>
    114a:	90 95       	com	r25
    114c:	80 95       	com	r24
    114e:	70 95       	com	r23
    1150:	61 95       	neg	r22
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <itoa>:
    115a:	fb 01       	movw	r30, r22
    115c:	9f 01       	movw	r18, r30
    115e:	e8 94       	clt
    1160:	42 30       	cpi	r20, 0x02	; 2
    1162:	bc f0       	brlt	.+46     	; 0x1192 <itoa+0x38>
    1164:	45 32       	cpi	r20, 0x25	; 37
    1166:	ac f4       	brge	.+42     	; 0x1192 <itoa+0x38>
    1168:	4a 30       	cpi	r20, 0x0A	; 10
    116a:	29 f4       	brne	.+10     	; 0x1176 <itoa+0x1c>
    116c:	97 fb       	bst	r25, 7
    116e:	1e f4       	brtc	.+6      	; 0x1176 <itoa+0x1c>
    1170:	90 95       	com	r25
    1172:	81 95       	neg	r24
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	64 2f       	mov	r22, r20
    1178:	77 27       	eor	r23, r23
    117a:	1e d0       	rcall	.+60     	; 0x11b8 <__udivmodhi4>
    117c:	80 5d       	subi	r24, 0xD0	; 208
    117e:	8a 33       	cpi	r24, 0x3A	; 58
    1180:	0c f0       	brlt	.+2      	; 0x1184 <itoa+0x2a>
    1182:	89 5d       	subi	r24, 0xD9	; 217
    1184:	81 93       	st	Z+, r24
    1186:	cb 01       	movw	r24, r22
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	a9 f7       	brne	.-22     	; 0x1176 <itoa+0x1c>
    118c:	16 f4       	brtc	.+4      	; 0x1192 <itoa+0x38>
    118e:	5d e2       	ldi	r21, 0x2D	; 45
    1190:	51 93       	st	Z+, r21
    1192:	10 82       	st	Z, r1
    1194:	c9 01       	movw	r24, r18
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <strrev>

00001198 <strrev>:
    1198:	dc 01       	movw	r26, r24
    119a:	fc 01       	movw	r30, r24
    119c:	67 2f       	mov	r22, r23
    119e:	71 91       	ld	r23, Z+
    11a0:	77 23       	and	r23, r23
    11a2:	e1 f7       	brne	.-8      	; 0x119c <strrev+0x4>
    11a4:	32 97       	sbiw	r30, 0x02	; 2
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <strrev+0x18>
    11a8:	7c 91       	ld	r23, X
    11aa:	6d 93       	st	X+, r22
    11ac:	70 83       	st	Z, r23
    11ae:	62 91       	ld	r22, -Z
    11b0:	ae 17       	cp	r26, r30
    11b2:	bf 07       	cpc	r27, r31
    11b4:	c8 f3       	brcs	.-14     	; 0x11a8 <strrev+0x10>
    11b6:	08 95       	ret

000011b8 <__udivmodhi4>:
    11b8:	aa 1b       	sub	r26, r26
    11ba:	bb 1b       	sub	r27, r27
    11bc:	51 e1       	ldi	r21, 0x11	; 17
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <__udivmodhi4_ep>

000011c0 <__udivmodhi4_loop>:
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	a6 17       	cp	r26, r22
    11c6:	b7 07       	cpc	r27, r23
    11c8:	10 f0       	brcs	.+4      	; 0x11ce <__udivmodhi4_ep>
    11ca:	a6 1b       	sub	r26, r22
    11cc:	b7 0b       	sbc	r27, r23

000011ce <__udivmodhi4_ep>:
    11ce:	88 1f       	adc	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	5a 95       	dec	r21
    11d4:	a9 f7       	brne	.-22     	; 0x11c0 <__udivmodhi4_loop>
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	08 95       	ret

000011e0 <_exit>:
    11e0:	f8 94       	cli

000011e2 <__stop_program>:
    11e2:	ff cf       	rjmp	.-2      	; 0x11e2 <__stop_program>
