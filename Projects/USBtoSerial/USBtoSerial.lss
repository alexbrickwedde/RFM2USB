
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000f48  00000fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800118  00800118  00000ff4  2**0
                  ALLOC
  3 .debug_aranges 00000490  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c88  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008393  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000209a  00000000  00000000  0000a49f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000064fa  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  00012a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000033d3  00000000  00000000  00013114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003803  00000000  00000000  000164e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000598  00000000  00000000  00019cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
   a:	00 00       	nop
   c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
   e:	00 00       	nop
  10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
  12:	00 00       	nop
  14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
  16:	00 00       	nop
  18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
  1e:	00 00       	nop
  20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
  22:	00 00       	nop
  24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
  26:	00 00       	nop
  28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0c c3       	rjmp	.+1560   	; 0x646 <__vector_11>
  2e:	00 00       	nop
  30:	d1 c2       	rjmp	.+1442   	; 0x5d4 <__vector_12>
  32:	00 00       	nop
  34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
  36:	00 00       	nop
  38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
  3e:	00 00       	nop
  40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
  42:	00 00       	nop
  44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
  46:	00 00       	nop
  48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
  4e:	00 00       	nop
  50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
  52:	00 00       	nop
  54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
  56:	00 00       	nop
  58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c0       	rjmp	.+412    	; 0x1fa <__vector_23>
  5e:	00 00       	nop
  60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
  62:	00 00       	nop
  64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
  66:	00 00       	nop
  68:	81 c0       	rjmp	.+258    	; 0x16c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
  6e:	00 00       	nop
  70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
  72:	00 00       	nop
  74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
  76:	00 00       	nop
  78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
  7e:	00 00       	nop
  80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
  82:	00 00       	nop
  84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
  86:	00 00       	nop
  88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
  8e:	00 00       	nop
  90:	6d c0       	rjmp	.+218    	; 0x16c <__bad_interrupt>
  92:	00 00       	nop
  94:	6b c0       	rjmp	.+214    	; 0x16c <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
 116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
 126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d2 e0       	ldi	r29, 0x02	; 2
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	e8 e4       	ldi	r30, 0x48	; 72
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	02 c0       	rjmp	.+4      	; 0x152 <.do_copy_data_start>

0000014e <.do_copy_data_loop>:
 14e:	05 90       	lpm	r0, Z+
 150:	0d 92       	st	X+, r0

00000152 <.do_copy_data_start>:
 152:	a8 31       	cpi	r26, 0x18	; 24
 154:	b1 07       	cpc	r27, r17
 156:	d9 f7       	brne	.-10     	; 0x14e <.do_copy_data_loop>

00000158 <__do_clear_bss>:
 158:	12 e0       	ldi	r17, 0x02	; 2
 15a:	a8 e1       	ldi	r26, 0x18	; 24
 15c:	b1 e0       	ldi	r27, 0x01	; 1
 15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
 160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
 162:	ac 33       	cpi	r26, 0x3C	; 60
 164:	b1 07       	cpc	r27, r17
 166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
 168:	da d0       	rcall	.+436    	; 0x31e <main>
 16a:	ec c6       	rjmp	.+3544   	; 0xf44 <_exit>

0000016c <__bad_interrupt>:
 16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
 172:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
 174:	e8 81       	ld	r30, Y
 176:	f9 81       	ldd	r31, Y+1	; 0x01
 178:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
 17a:	88 81       	ld	r24, Y
 17c:	99 81       	ldd	r25, Y+1	; 0x01
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	99 83       	std	Y+1, r25	; 0x01
 182:	88 83       	st	Y, r24
 184:	2e 81       	ldd	r18, Y+6	; 0x06
 186:	3f 81       	ldd	r19, Y+7	; 0x07
 188:	82 17       	cp	r24, r18
 18a:	93 07       	cpc	r25, r19
 18c:	21 f4       	brne	.+8      	; 0x196 <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	99 83       	std	Y+1, r25	; 0x01
 194:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 196:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 198:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
 19a:	8a 85       	ldd	r24, Y+10	; 0x0a
 19c:	9b 85       	ldd	r25, Y+11	; 0x0b
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	9b 87       	std	Y+11, r25	; 0x0b
 1a2:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1a4:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
 1b0:	ec 01       	movw	r28, r24

			uint8_t Data = *Buffer->Out;
 1b2:	ea 81       	ldd	r30, Y+2	; 0x02
 1b4:	fb 81       	ldd	r31, Y+3	; 0x03
 1b6:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
 1b8:	fb 83       	std	Y+3, r31	; 0x03
 1ba:	ea 83       	std	Y+2, r30	; 0x02
 1bc:	8e 81       	ldd	r24, Y+6	; 0x06
 1be:	9f 81       	ldd	r25, Y+7	; 0x07
 1c0:	e8 17       	cp	r30, r24
 1c2:	f9 07       	cpc	r31, r25
 1c4:	21 f4       	brne	.+8      	; 0x1ce <RingBuffer_Remove+0x22>
			  Buffer->Out = Buffer->Start;
 1c6:	8c 81       	ldd	r24, Y+4	; 0x04
 1c8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ca:	9b 83       	std	Y+3, r25	; 0x03
 1cc:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 1ce:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 1d0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
 1d2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	9b 87       	std	Y+11, r25	; 0x0b
 1da:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1dc:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
 1de:	83 2f       	mov	r24, r19
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <EVENT_USB_Device_Connect>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	80 63       	ori	r24, 0x30	; 48
 1ea:	8f 7d       	andi	r24, 0xDF	; 223
 1ec:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1ee:	08 95       	ret

000001f0 <EVENT_USB_Device_Disconnect>:
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	8f 7e       	andi	r24, 0xEF	; 239
 1f6:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1f8:	08 95       	ret

000001fa <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 21c:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 220:	8e b3       	in	r24, 0x1e	; 30
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	19 f4       	brne	.+6      	; 0x22c <__vector_23+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 226:	84 ea       	ldi	r24, 0xA4	; 164
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	a1 df       	rcall	.-190    	; 0x16e <RingBuffer_Insert>
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 24e:	1f 93       	push	r17
 250:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 252:	86 89       	ldd	r24, Z+22	; 0x16
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	19 f0       	breq	.+6      	; 0x25e <EVENT_CDC_Device_LineEncodingChanged+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	19 f4       	brne	.+6      	; 0x262 <EVENT_CDC_Device_LineEncodingChanged+0x14>
 25c:	04 c0       	rjmp	.+8      	; 0x266 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 25e:	10 e3       	ldi	r17, 0x30	; 48
 260:	03 c0       	rjmp	.+6      	; 0x268 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	01 c0       	rjmp	.+2      	; 0x268 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 266:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 268:	85 89       	ldd	r24, Z+21	; 0x15
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	09 f4       	brne	.+2      	; 0x270 <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
 26e:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 270:	87 89       	ldd	r24, Z+23	; 0x17
 272:	87 30       	cpi	r24, 0x07	; 7
 274:	31 f0       	breq	.+12     	; 0x282 <EVENT_CDC_Device_LineEncodingChanged+0x34>
 276:	88 30       	cpi	r24, 0x08	; 8
 278:	31 f0       	breq	.+12     	; 0x286 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 27a:	86 30       	cpi	r24, 0x06	; 6
 27c:	29 f4       	brne	.+10     	; 0x288 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 27e:	12 60       	ori	r17, 0x02	; 2
 280:	03 c0       	rjmp	.+6      	; 0x288 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
 282:	14 60       	ori	r17, 0x04	; 4
 284:	01 c0       	rjmp	.+2      	; 0x288 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 286:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 288:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 28c:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 290:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 294:	21 89       	ldd	r18, Z+17	; 0x11
 296:	32 89       	ldd	r19, Z+18	; 0x12
 298:	43 89       	ldd	r20, Z+19	; 0x13
 29a:	54 89       	ldd	r21, Z+20	; 0x14
 29c:	ca 01       	movw	r24, r20
 29e:	b9 01       	movw	r22, r18
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	77 95       	ror	r23
 2a6:	67 95       	ror	r22
 2a8:	60 58       	subi	r22, 0x80	; 128
 2aa:	7b 47       	sbci	r23, 0x7B	; 123
 2ac:	81 4e       	sbci	r24, 0xE1	; 225
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	27 d6       	rcall	.+3150   	; 0xf00 <__udivmodsi4>
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	30 40       	sbci	r19, 0x00	; 0
 2b6:	30 93 cd 00 	sts	0x00CD, r19
 2ba:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 2be:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 2c8:	88 e9       	ldi	r24, 0x98	; 152
 2ca:	80 93 c9 00 	sts	0x00C9, r24
}
 2ce:	1f 91       	pop	r17
 2d0:	08 95       	ret

000002d2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	91 e0       	ldi	r25, 0x01	; 1
}
 2d6:	6d c5       	rjmp	.+2778   	; 0xdb2 <CDC_Device_ProcessControlRequest>

000002d8 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	1a d5       	rcall	.+2612   	; 0xd12 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2de:	80 fd       	sbrc	r24, 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <EVENT_USB_Device_ConfigurationChanged+0xe>
 2e2:	90 e1       	ldi	r25, 0x10	; 16
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <EVENT_USB_Device_ConfigurationChanged+0x10>
 2e6:	90 e2       	ldi	r25, 0x20	; 32
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	90 95       	com	r25
 2ec:	80 63       	ori	r24, 0x30	; 48
 2ee:	98 23       	and	r25, r24
 2f0:	9b b9       	out	0x0b, r25	; 11
}
 2f2:	08 95       	ret

000002f4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2f4:	84 b7       	in	r24, 0x34	; 52
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	80 93 60 00 	sts	0x0060, r24
 304:	10 92 60 00 	sts	0x0060, r1
 308:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 30a:	8a b1       	in	r24, 0x0a	; 10
 30c:	80 63       	ori	r24, 0x30	; 48
 30e:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	80 63       	ori	r24, 0x30	; 48
 314:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
//TODO	clock_prescale_set(0);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 316:	4f d1       	rcall	.+670    	; 0x5b6 <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	85 bd       	out	0x25, r24	; 37
}
 31c:	08 95       	ret

0000031e <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
	SetupHardware();
 322:	e8 df       	rcall	.-48     	; 0x2f4 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 324:	e8 e1       	ldi	r30, 0x18	; 24
 326:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 328:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 32a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
 32c:	84 e2       	ldi	r24, 0x24	; 36
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	91 83       	std	Z+1, r25	; 0x01
 332:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 334:	93 83       	std	Z+3, r25	; 0x03
 336:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 338:	95 83       	std	Z+5, r25	; 0x05
 33a:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 33c:	84 ea       	ldi	r24, 0xA4	; 164
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	97 83       	std	Z+7, r25	; 0x07
 342:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	91 87       	std	Z+9, r25	; 0x09
 34a:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
 34c:	13 86       	std	Z+11, r1	; 0x0b
 34e:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 350:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 352:	e4 ea       	ldi	r30, 0xA4	; 164
 354:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 356:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 358:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
 35a:	80 eb       	ldi	r24, 0xB0	; 176
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 362:	93 83       	std	Z+3, r25	; 0x03
 364:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 366:	95 83       	std	Z+5, r25	; 0x05
 368:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	97 83       	std	Z+7, r25	; 0x07
 370:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	91 87       	std	Z+9, r25	; 0x09
 378:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
 37a:	13 86       	std	Z+11, r1	; 0x0b
 37c:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 37e:	2f bf       	out	0x3f, r18	; 63
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
 380:	8b b1       	in	r24, 0x0b	; 11
 382:	80 63       	ori	r24, 0x30	; 48
 384:	8f 7e       	andi	r24, 0xEF	; 239
 386:	8b b9       	out	0x0b, r24	; 11

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 388:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 38a:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 38c:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
 38e:	20 91 22 01 	lds	r18, 0x0122
 392:	30 91 23 01 	lds	r19, 0x0123
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 396:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 398:	80 91 20 01 	lds	r24, 0x0120
 39c:	90 91 21 01 	lds	r25, 0x0121
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <main+0x9a>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	28 d4       	rcall	.+2128   	; 0xbfc <CDC_Device_ReceiveByte>
 3ac:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 3ae:	97 fd       	sbrc	r25, 7
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <main+0x9a>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	db de       	rcall	.-586    	; 0x16e <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 3b8:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 3ba:	f8 94       	cli
 3bc:	c0 91 ae 01 	lds	r28, 0x01AE
 3c0:	d0 91 af 01 	lds	r29, 0x01AF
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 3c4:	8f bf       	out	0x3f, r24	; 63
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
 3c6:	a8 99       	sbic	0x15, 0	; 21
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <main+0xb2>
 3ca:	c1 36       	cpi	r28, 0x61	; 97
 3cc:	d1 05       	cpc	r29, r1
 3ce:	90 f0       	brcs	.+36     	; 0x3f4 <main+0xd6>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
 3d0:	a8 9a       	sbi	0x15, 0	; 21
 3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <main+0xd2>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 3d4:	e0 91 a6 01 	lds	r30, 0x01A6
 3d8:	f0 91 a7 01 	lds	r31, 0x01A7
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	60 81       	ld	r22, Z
 3e2:	73 d4       	rcall	.+2278   	; 0xcca <CDC_Device_SendByte>
 3e4:	21 97       	sbiw	r28, 0x01	; 1
 3e6:	88 23       	and	r24, r24
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <main+0xd6>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
 3ea:	84 ea       	ldi	r24, 0xA4	; 164
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	de de       	rcall	.-580    	; 0x1ac <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 3f0:	20 97       	sbiw	r28, 0x00	; 0
 3f2:	81 f7       	brne	.-32     	; 0x3d4 <main+0xb6>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 3f4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 3f6:	f8 94       	cli
 3f8:	80 91 22 01 	lds	r24, 0x0122
 3fc:	90 91 23 01 	lds	r25, 0x0123
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 400:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 402:	89 2b       	or	r24, r25
 404:	51 f0       	breq	.+20     	; 0x41a <main+0xfc>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 406:	88 e1       	ldi	r24, 0x18	; 24
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	d0 de       	rcall	.-608    	; 0x1ac <RingBuffer_Remove>
 40c:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 40e:	80 91 c8 00 	lds	r24, 0x00C8
 412:	85 ff       	sbrs	r24, 5
 414:	fc cf       	rjmp	.-8      	; 0x40e <main+0xf0>
				UDR1 = DataByte;
 416:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	46 d4       	rcall	.+2188   	; 0xcac <CDC_Device_USBTask>
		USB_USBTask();
 420:	db d3       	rcall	.+1974   	; 0xbd8 <USB_USBTask>
 422:	b3 cf       	rjmp	.-154    	; 0x38a <main+0x6c>

00000424 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 424:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 426:	92 30       	cpi	r25, 0x02	; 2
 428:	49 f0       	breq	.+18     	; 0x43c <CALLBACK_USB_GetDescriptor+0x18>
 42a:	93 30       	cpi	r25, 0x03	; 3
 42c:	61 f0       	breq	.+24     	; 0x446 <CALLBACK_USB_GetDescriptor+0x22>
 42e:	91 30       	cpi	r25, 0x01	; 1
 430:	f9 f4       	brne	.+62     	; 0x470 <CALLBACK_USB_GetDescriptor+0x4c>
 432:	e8 e9       	ldi	r30, 0x98	; 152
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	22 e1       	ldi	r18, 0x12	; 18
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	1e c0       	rjmp	.+60     	; 0x478 <CALLBACK_USB_GetDescriptor+0x54>
 43c:	ea ea       	ldi	r30, 0xAA	; 170
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	2e e3       	ldi	r18, 0x3E	; 62
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	19 c0       	rjmp	.+50     	; 0x478 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	49 f0       	breq	.+18     	; 0x45c <CALLBACK_USB_GetDescriptor+0x38>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	18 f0       	brcs	.+6      	; 0x454 <CALLBACK_USB_GetDescriptor+0x30>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	79 f4       	brne	.+30     	; 0x470 <CALLBACK_USB_GetDescriptor+0x4c>
 452:	08 c0       	rjmp	.+16     	; 0x464 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 454:	e8 ee       	ldi	r30, 0xE8	; 232
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	84 91       	lpm	r24, Z+
 45a:	07 c0       	rjmp	.+14     	; 0x46a <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 45c:	ec ee       	ldi	r30, 0xEC	; 236
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	84 91       	lpm	r24, Z+
 462:	03 c0       	rjmp	.+6      	; 0x46a <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 464:	e6 e0       	ldi	r30, 0x06	; 6
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	84 91       	lpm	r24, Z+
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	04 c0       	rjmp	.+8      	; 0x478 <CALLBACK_USB_GetDescriptor+0x54>
 470:	e0 e0       	ldi	r30, 0x00	; 0
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 478:	ed 93       	st	X+, r30
 47a:	fc 93       	st	X, r31
	return Size;
}
 47c:	c9 01       	movw	r24, r18
 47e:	08 95       	ret

00000480 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 480:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 484:	80 91 eb 00 	lds	r24, 0x00EB
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 48e:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 492:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 496:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 49a:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 49e:	88 1f       	adc	r24, r24
 4a0:	88 27       	eor	r24, r24
 4a2:	88 1f       	adc	r24, r24
 4a4:	08 95       	ret

000004a6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4a6:	80 91 34 02 	lds	r24, 0x0234
 4aa:	88 23       	and	r24, r24
 4ac:	8c f4       	brge	.+34     	; 0x4d0 <Endpoint_ClearStatusStage+0x2a>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4b0:	8e b3       	in	r24, 0x1e	; 30
 4b2:	88 23       	and	r24, r24
 4b4:	b1 f0       	breq	.+44     	; 0x4e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4b6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4ba:	82 ff       	sbrs	r24, 2
 4bc:	f9 cf       	rjmp	.-14     	; 0x4b0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4be:	80 91 e8 00 	lds	r24, 0x00E8
 4c2:	8b 77       	andi	r24, 0x7B	; 123
 4c4:	80 93 e8 00 	sts	0x00E8, r24
 4c8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4ca:	8e b3       	in	r24, 0x1e	; 30
 4cc:	88 23       	and	r24, r24
 4ce:	49 f0       	breq	.+18     	; 0x4e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4d4:	80 ff       	sbrs	r24, 0
 4d6:	f9 cf       	rjmp	.-14     	; 0x4ca <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4d8:	80 91 e8 00 	lds	r24, 0x00E8
 4dc:	8e 77       	andi	r24, 0x7E	; 126
 4de:	80 93 e8 00 	sts	0x00E8, r24
 4e2:	08 95       	ret

000004e4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 4e4:	40 91 e4 00 	lds	r20, 0x00E4
 4e8:	50 91 e5 00 	lds	r21, 0x00E5
 4ec:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 4ee:	80 91 ec 00 	lds	r24, 0x00EC
 4f2:	80 ff       	sbrs	r24, 0
 4f4:	23 c0       	rjmp	.+70     	; 0x53c <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4f6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 4fa:	80 fd       	sbrc	r24, 0
 4fc:	1d c0       	rjmp	.+58     	; 0x538 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4fe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 500:	88 23       	and	r24, r24
 502:	11 f4       	brne	.+4      	; 0x508 <Endpoint_WaitUntilReady+0x24>
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 508:	85 30       	cpi	r24, 0x05	; 5
 50a:	11 f4       	brne	.+4      	; 0x510 <Endpoint_WaitUntilReady+0x2c>
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 510:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 514:	85 ff       	sbrs	r24, 5
 516:	02 c0       	rjmp	.+4      	; 0x51c <Endpoint_WaitUntilReady+0x38>
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	08 95       	ret
 51c:	80 91 e4 00 	lds	r24, 0x00E4
 520:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 524:	84 17       	cp	r24, r20
 526:	95 07       	cpc	r25, r21
 528:	11 f3       	breq	.-60     	; 0x4ee <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 52a:	22 23       	and	r18, r18
 52c:	11 f4       	brne	.+4      	; 0x532 <Endpoint_WaitUntilReady+0x4e>
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	08 95       	ret
 532:	21 50       	subi	r18, 0x01	; 1
 534:	ac 01       	movw	r20, r24
 536:	db cf       	rjmp	.-74     	; 0x4ee <Endpoint_WaitUntilReady+0xa>
 538:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 53a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 53c:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 540:	82 ff       	sbrs	r24, 2
 542:	dd cf       	rjmp	.-70     	; 0x4fe <Endpoint_WaitUntilReady+0x1a>
 544:	f9 cf       	rjmp	.-14     	; 0x538 <Endpoint_WaitUntilReady+0x54>

00000546 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 546:	40 d0       	rcall	.+128    	; 0x5c8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 548:	42 d0       	rcall	.+132    	; 0x5ce <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 54a:	80 91 d8 00 	lds	r24, 0x00D8
 54e:	8f 77       	andi	r24, 0x7F	; 127
 550:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 554:	80 91 d8 00 	lds	r24, 0x00D8
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 55e:	80 91 d8 00 	lds	r24, 0x00D8
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 570:	09 b4       	in	r0, 0x29	; 41
 572:	00 fe       	sbrs	r0, 0
 574:	fd cf       	rjmp	.-6      	; 0x570 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 576:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 578:	10 92 30 02 	sts	0x0230, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 57c:	10 92 32 02 	sts	0x0232, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 580:	10 92 31 02 	sts	0x0231, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	42 e0       	ldi	r20, 0x02	; 2
 58a:	7a df       	rcall	.-268    	; 0x480 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 58c:	80 91 e1 00 	lds	r24, 0x00E1
 590:	8e 7f       	andi	r24, 0xFE	; 254
 592:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 596:	80 91 e2 00 	lds	r24, 0x00E2
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5a0:	80 91 e2 00 	lds	r24, 0x00E2
 5a4:	88 60       	ori	r24, 0x08	; 8
 5a6:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5aa:	80 91 e0 00 	lds	r24, 0x00E0
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5b4:	08 95       	ret

000005b6 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 5b6:	e3 e6       	ldi	r30, 0x63	; 99
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 33 02 	sts	0x0233, r24

	USB_ResetInterface();
}
 5c6:	bf cf       	rjmp	.-130    	; 0x546 <USB_ResetInterface>

000005c8 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5c8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 5cc:	08 95       	ret

000005ce <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 5ce:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 5d2:	08 95       	ret

000005d4 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	1f 93       	push	r17
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 5f8:	e9 ee       	ldi	r30, 0xE9	; 233
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	10 81       	ld	r17, Z
 5fe:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 600:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 602:	e0 ef       	ldi	r30, 0xF0	; 240
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	87 7f       	andi	r24, 0xF7	; 247
 60a:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 60c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 60e:	7a d1       	rcall	.+756    	; 0x904 <USB_Device_ProcessControlRequest>
 610:	a9 ee       	ldi	r26, 0xE9	; 233
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 616:	e0 ef       	ldi	r30, 0xF0	; 240
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	88 60       	ori	r24, 0x08	; 8
 61e:	80 83       	st	Z, r24
 620:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	bf 91       	pop	r27
 628:	af 91       	pop	r26
 62a:	9f 91       	pop	r25
 62c:	8f 91       	pop	r24
 62e:	7f 91       	pop	r23
 630:	6f 91       	pop	r22
 632:	5f 91       	pop	r21
 634:	4f 91       	pop	r20
 636:	3f 91       	pop	r19
 638:	2f 91       	pop	r18
 63a:	1f 91       	pop	r17
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 668:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 66c:	82 ff       	sbrs	r24, 2
 66e:	0a c0       	rjmp	.+20     	; 0x684 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 670:	80 91 e2 00 	lds	r24, 0x00E2
 674:	82 ff       	sbrs	r24, 2
 676:	06 c0       	rjmp	.+12     	; 0x684 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 678:	80 91 e1 00 	lds	r24, 0x00E1
 67c:	8b 7f       	andi	r24, 0xFB	; 251
 67e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 682:	a9 d2       	rcall	.+1362   	; 0xbd6 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 684:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 688:	80 ff       	sbrs	r24, 0
 68a:	16 c0       	rjmp	.+44     	; 0x6b8 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 68c:	80 91 e2 00 	lds	r24, 0x00E2
 690:	80 ff       	sbrs	r24, 0
 692:	12 c0       	rjmp	.+36     	; 0x6b8 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 694:	80 91 e2 00 	lds	r24, 0x00E2
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 69e:	80 91 e2 00 	lds	r24, 0x00E2
 6a2:	80 61       	ori	r24, 0x10	; 16
 6a4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 6a8:	80 91 d8 00 	lds	r24, 0x00D8
 6ac:	80 62       	ori	r24, 0x20	; 32
 6ae:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6b2:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 6b4:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 6b6:	9c dd       	rcall	.-1224   	; 0x1f0 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6b8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6bc:	84 ff       	sbrs	r24, 4
 6be:	2c c0       	rjmp	.+88     	; 0x718 <__vector_11+0xd2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6c0:	80 91 e2 00 	lds	r24, 0x00E2
 6c4:	84 ff       	sbrs	r24, 4
 6c6:	28 c0       	rjmp	.+80     	; 0x718 <__vector_11+0xd2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6cc:	86 e0       	ldi	r24, 0x06	; 6
 6ce:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6d0:	09 b4       	in	r0, 0x29	; 41
 6d2:	00 fe       	sbrs	r0, 0
 6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6d6:	80 91 d8 00 	lds	r24, 0x00D8
 6da:	8f 7d       	andi	r24, 0xDF	; 223
 6dc:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6e0:	80 91 e1 00 	lds	r24, 0x00E1
 6e4:	8f 7e       	andi	r24, 0xEF	; 239
 6e6:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6ea:	80 91 e2 00 	lds	r24, 0x00E2
 6ee:	8f 7e       	andi	r24, 0xEF	; 239
 6f0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6f4:	80 91 e2 00 	lds	r24, 0x00E2
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6fe:	80 91 30 02 	lds	r24, 0x0230
 702:	88 23       	and	r24, r24
 704:	31 f4       	brne	.+12     	; 0x712 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 706:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 70a:	87 fd       	sbrc	r24, 7
 70c:	02 c0       	rjmp	.+4      	; 0x712 <__vector_11+0xcc>
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	01 c0       	rjmp	.+2      	; 0x714 <__vector_11+0xce>
 712:	84 e0       	ldi	r24, 0x04	; 4
 714:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 716:	67 dd       	rcall	.-1330   	; 0x1e6 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 718:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 71c:	83 ff       	sbrs	r24, 3
 71e:	26 c0       	rjmp	.+76     	; 0x76c <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 720:	80 91 e2 00 	lds	r24, 0x00E2
 724:	83 ff       	sbrs	r24, 3
 726:	22 c0       	rjmp	.+68     	; 0x76c <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 728:	80 91 e1 00 	lds	r24, 0x00E1
 72c:	87 7f       	andi	r24, 0xF7	; 247
 72e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 736:	10 92 30 02 	sts	0x0230, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 73a:	80 91 e1 00 	lds	r24, 0x00E1
 73e:	8e 7f       	andi	r24, 0xFE	; 254
 740:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 744:	80 91 e2 00 	lds	r24, 0x00E2
 748:	8e 7f       	andi	r24, 0xFE	; 254
 74a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 74e:	80 91 e2 00 	lds	r24, 0x00E2
 752:	80 61       	ori	r24, 0x10	; 16
 754:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	42 e0       	ldi	r20, 0x02	; 2
 75e:	90 de       	rcall	.-736    	; 0x480 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 760:	80 91 f0 00 	lds	r24, 0x00F0
 764:	88 60       	ori	r24, 0x08	; 8
 766:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 76a:	35 d2       	rcall	.+1130   	; 0xbd6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 76c:	ff 91       	pop	r31
 76e:	ef 91       	pop	r30
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	9f 91       	pop	r25
 776:	8f 91       	pop	r24
 778:	7f 91       	pop	r23
 77a:	6f 91       	pop	r22
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <Endpoint_Write_Control_Stream_LE>:
 78e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 790:	40 91 3a 02 	lds	r20, 0x023A
 794:	50 91 3b 02 	lds	r21, 0x023B
 798:	46 17       	cp	r20, r22
 79a:	57 07       	cpc	r21, r23
 79c:	18 f4       	brcc	.+6      	; 0x7a4 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 79e:	f9 01       	movw	r30, r18
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	3c c0       	rjmp	.+120    	; 0x81c <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7a4:	61 15       	cp	r22, r1
 7a6:	71 05       	cpc	r23, r1
 7a8:	11 f0       	breq	.+4      	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x20>
 7aa:	ab 01       	movw	r20, r22
 7ac:	f8 cf       	rjmp	.-16     	; 0x79e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ae:	80 91 e8 00 	lds	r24, 0x00E8
 7b2:	8e 77       	andi	r24, 0x7E	; 126
 7b4:	80 93 e8 00 	sts	0x00E8, r24
 7b8:	40 e0       	ldi	r20, 0x00	; 0
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	f0 cf       	rjmp	.-32     	; 0x79e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7be:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7c0:	88 23       	and	r24, r24
 7c2:	e9 f1       	breq	.+122    	; 0x83e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7c4:	85 30       	cpi	r24, 0x05	; 5
 7c6:	e9 f1       	breq	.+122    	; 0x842 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7cc:	83 ff       	sbrs	r24, 3
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <Endpoint_Write_Control_Stream_LE+0x46>
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 7d8:	82 fd       	sbrc	r24, 2
 7da:	2b c0       	rjmp	.+86     	; 0x832 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7dc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 7e0:	80 ff       	sbrs	r24, 0
 7e2:	1c c0       	rjmp	.+56     	; 0x81c <Endpoint_Write_Control_Stream_LE+0x8e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 7e4:	80 91 f2 00 	lds	r24, 0x00F2
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7ee:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7f0:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 7f4:	41 50       	subi	r20, 0x01	; 1
 7f6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 7f8:	2f 5f       	subi	r18, 0xFF	; 255
 7fa:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7fc:	41 15       	cp	r20, r1
 7fe:	51 05       	cpc	r21, r1
 800:	19 f0       	breq	.+6      	; 0x808 <Endpoint_Write_Control_Stream_LE+0x7a>
 802:	28 30       	cpi	r18, 0x08	; 8
 804:	31 05       	cpc	r19, r1
 806:	98 f3       	brcs	.-26     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	28 30       	cpi	r18, 0x08	; 8
 80c:	31 05       	cpc	r19, r1
 80e:	09 f4       	brne	.+2      	; 0x812 <Endpoint_Write_Control_Stream_LE+0x84>
 810:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 812:	80 91 e8 00 	lds	r24, 0x00E8
 816:	8e 77       	andi	r24, 0x7E	; 126
 818:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 81c:	41 15       	cp	r20, r1
 81e:	51 05       	cpc	r21, r1
 820:	71 f6       	brne	.-100    	; 0x7be <Endpoint_Write_Control_Stream_LE+0x30>
 822:	99 23       	and	r25, r25
 824:	61 f6       	brne	.-104    	; 0x7be <Endpoint_Write_Control_Stream_LE+0x30>
 826:	05 c0       	rjmp	.+10     	; 0x832 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 828:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 82a:	88 23       	and	r24, r24
 82c:	41 f0       	breq	.+16     	; 0x83e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 82e:	85 30       	cpi	r24, 0x05	; 5
 830:	41 f0       	breq	.+16     	; 0x842 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 832:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 836:	82 ff       	sbrs	r24, 2
 838:	f7 cf       	rjmp	.-18     	; 0x828 <Endpoint_Write_Control_Stream_LE+0x9a>
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	08 95       	ret
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	08 95       	ret
 842:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 844:	08 95       	ret

00000846 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 846:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 848:	40 91 3a 02 	lds	r20, 0x023A
 84c:	50 91 3b 02 	lds	r21, 0x023B
 850:	46 17       	cp	r20, r22
 852:	57 07       	cpc	r21, r23
 854:	18 f4       	brcc	.+6      	; 0x85c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 856:	f9 01       	movw	r30, r18
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	3f c0       	rjmp	.+126    	; 0x8da <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 85c:	61 15       	cp	r22, r1
 85e:	71 05       	cpc	r23, r1
 860:	11 f0       	breq	.+4      	; 0x866 <Endpoint_Write_Control_PStream_LE+0x20>
 862:	ab 01       	movw	r20, r22
 864:	f8 cf       	rjmp	.-16     	; 0x856 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 866:	80 91 e8 00 	lds	r24, 0x00E8
 86a:	8e 77       	andi	r24, 0x7E	; 126
 86c:	80 93 e8 00 	sts	0x00E8, r24
 870:	40 e0       	ldi	r20, 0x00	; 0
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	f0 cf       	rjmp	.-32     	; 0x856 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 876:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 878:	88 23       	and	r24, r24
 87a:	09 f4       	brne	.+2      	; 0x87e <Endpoint_Write_Control_PStream_LE+0x38>
 87c:	3f c0       	rjmp	.+126    	; 0x8fc <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 87e:	85 30       	cpi	r24, 0x05	; 5
 880:	09 f4       	brne	.+2      	; 0x884 <Endpoint_Write_Control_PStream_LE+0x3e>
 882:	3e c0       	rjmp	.+124    	; 0x900 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 884:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 888:	83 ff       	sbrs	r24, 3
 88a:	02 c0       	rjmp	.+4      	; 0x890 <Endpoint_Write_Control_PStream_LE+0x4a>
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 890:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 894:	82 fd       	sbrc	r24, 2
 896:	2c c0       	rjmp	.+88     	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 898:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 89c:	80 ff       	sbrs	r24, 0
 89e:	1d c0       	rjmp	.+58     	; 0x8da <Endpoint_Write_Control_PStream_LE+0x94>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 8a0:	80 91 f2 00 	lds	r24, 0x00F2
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 8aa:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8ac:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 8b0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 8b2:	41 50       	subi	r20, 0x01	; 1
 8b4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 8b6:	2f 5f       	subi	r18, 0xFF	; 255
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 8ba:	41 15       	cp	r20, r1
 8bc:	51 05       	cpc	r21, r1
 8be:	19 f0       	breq	.+6      	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x80>
 8c0:	28 30       	cpi	r18, 0x08	; 8
 8c2:	31 05       	cpc	r19, r1
 8c4:	90 f3       	brcs	.-28     	; 0x8aa <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	28 30       	cpi	r18, 0x08	; 8
 8ca:	31 05       	cpc	r19, r1
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <Endpoint_Write_Control_PStream_LE+0x8a>
 8ce:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8d0:	80 91 e8 00 	lds	r24, 0x00E8
 8d4:	8e 77       	andi	r24, 0x7E	; 126
 8d6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8da:	41 15       	cp	r20, r1
 8dc:	51 05       	cpc	r21, r1
 8de:	59 f6       	brne	.-106    	; 0x876 <Endpoint_Write_Control_PStream_LE+0x30>
 8e0:	99 23       	and	r25, r25
 8e2:	49 f6       	brne	.-110    	; 0x876 <Endpoint_Write_Control_PStream_LE+0x30>
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8e6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8e8:	88 23       	and	r24, r24
 8ea:	41 f0       	breq	.+16     	; 0x8fc <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ec:	85 30       	cpi	r24, 0x05	; 5
 8ee:	41 f0       	breq	.+16     	; 0x900 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8f0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8f4:	82 ff       	sbrs	r24, 2
 8f6:	f7 cf       	rjmp	.-18     	; 0x8e6 <Endpoint_Write_Control_PStream_LE+0xa0>
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	08 95       	ret
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	08 95       	ret
 900:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 902:	08 95       	ret

00000904 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	ac 97       	sbiw	r28, 0x2c	; 44
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	de bf       	out	0x3e, r29	; 62
 918:	0f be       	out	0x3f, r0	; 63
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	e4 e3       	ldi	r30, 0x34	; 52
 91e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 920:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 924:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 926:	22 e0       	ldi	r18, 0x02	; 2
 928:	ec 33       	cpi	r30, 0x3C	; 60
 92a:	f2 07       	cpc	r31, r18
 92c:	c9 f7       	brne	.-14     	; 0x920 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 92e:	d1 dc       	rcall	.-1630   	; 0x2d2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 930:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 934:	83 ff       	sbrs	r24, 3
 936:	36 c1       	rjmp	.+620    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 938:	80 91 34 02 	lds	r24, 0x0234

		switch (USB_ControlRequest.bRequest)
 93c:	30 91 35 02 	lds	r19, 0x0235
 940:	35 30       	cpi	r19, 0x05	; 5
 942:	09 f4       	brne	.+2      	; 0x946 <USB_Device_ProcessControlRequest+0x42>
 944:	87 c0       	rjmp	.+270    	; 0xa54 <USB_Device_ProcessControlRequest+0x150>
 946:	36 30       	cpi	r19, 0x06	; 6
 948:	40 f4       	brcc	.+16     	; 0x95a <USB_Device_ProcessControlRequest+0x56>
 94a:	31 30       	cpi	r19, 0x01	; 1
 94c:	c9 f1       	breq	.+114    	; 0x9c0 <USB_Device_ProcessControlRequest+0xbc>
 94e:	31 30       	cpi	r19, 0x01	; 1
 950:	70 f0       	brcs	.+28     	; 0x96e <USB_Device_ProcessControlRequest+0x6a>
 952:	33 30       	cpi	r19, 0x03	; 3
 954:	09 f0       	breq	.+2      	; 0x958 <USB_Device_ProcessControlRequest+0x54>
 956:	26 c1       	rjmp	.+588    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
 958:	33 c0       	rjmp	.+102    	; 0x9c0 <USB_Device_ProcessControlRequest+0xbc>
 95a:	38 30       	cpi	r19, 0x08	; 8
 95c:	09 f4       	brne	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x5c>
 95e:	f5 c0       	rjmp	.+490    	; 0xb4a <USB_Device_ProcessControlRequest+0x246>
 960:	39 30       	cpi	r19, 0x09	; 9
 962:	09 f4       	brne	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x62>
 964:	04 c1       	rjmp	.+520    	; 0xb6e <USB_Device_ProcessControlRequest+0x26a>
 966:	36 30       	cpi	r19, 0x06	; 6
 968:	09 f0       	breq	.+2      	; 0x96c <USB_Device_ProcessControlRequest+0x68>
 96a:	1c c1       	rjmp	.+568    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
 96c:	96 c0       	rjmp	.+300    	; 0xa9a <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 96e:	80 38       	cpi	r24, 0x80	; 128
 970:	21 f0       	breq	.+8      	; 0x97a <USB_Device_ProcessControlRequest+0x76>
 972:	82 38       	cpi	r24, 0x82	; 130
 974:	09 f0       	breq	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0x74>
 976:	16 c1       	rjmp	.+556    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
 978:	08 c0       	rjmp	.+16     	; 0x98a <USB_Device_ProcessControlRequest+0x86>
 97a:	90 91 31 02 	lds	r25, 0x0231
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 97e:	80 91 32 02 	lds	r24, 0x0232
 982:	88 23       	and	r24, r24
 984:	99 f0       	breq	.+38     	; 0x9ac <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 986:	92 60       	ori	r25, 0x02	; 2
 988:	11 c0       	rjmp	.+34     	; 0x9ac <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 98a:	80 91 38 02 	lds	r24, 0x0238
 98e:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 990:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 994:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	25 e0       	ldi	r18, 0x05	; 5
 99c:	96 95       	lsr	r25
 99e:	87 95       	ror	r24
 9a0:	2a 95       	dec	r18
 9a2:	e1 f7       	brne	.-8      	; 0x99c <USB_Device_ProcessControlRequest+0x98>
 9a4:	98 2f       	mov	r25, r24
 9a6:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ac:	80 91 e8 00 	lds	r24, 0x00E8
 9b0:	87 7f       	andi	r24, 0xF7	; 247
 9b2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9b6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 9ba:	10 92 f1 00 	sts	0x00F1, r1
 9be:	d0 c0       	rjmp	.+416    	; 0xb60 <USB_Device_ProcessControlRequest+0x25c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9c0:	88 23       	and	r24, r24
 9c2:	19 f0       	breq	.+6      	; 0x9ca <USB_Device_ProcessControlRequest+0xc6>
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0xc6>
 9c8:	ed c0       	rjmp	.+474    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	8f 71       	andi	r24, 0x1F	; 31
 9ce:	90 70       	andi	r25, 0x00	; 0
 9d0:	00 97       	sbiw	r24, 0x00	; 0
 9d2:	21 f0       	breq	.+8      	; 0x9dc <USB_Device_ProcessControlRequest+0xd8>
 9d4:	02 97       	sbiw	r24, 0x02	; 2
 9d6:	09 f0       	breq	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0xd6>
 9d8:	e5 c0       	rjmp	.+458    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
 9da:	0c c0       	rjmp	.+24     	; 0x9f4 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9dc:	80 91 36 02 	lds	r24, 0x0236
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0xe2>
 9e4:	df c0       	rjmp	.+446    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9e6:	10 92 32 02 	sts	0x0232, r1
 9ea:	33 30       	cpi	r19, 0x03	; 3
 9ec:	69 f5       	brne	.+90     	; 0xa48 <USB_Device_ProcessControlRequest+0x144>
 9ee:	80 93 32 02 	sts	0x0232, r24
 9f2:	2a c0       	rjmp	.+84     	; 0xa48 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9f4:	80 91 36 02 	lds	r24, 0x0236
 9f8:	88 23       	and	r24, r24
 9fa:	31 f5       	brne	.+76     	; 0xa48 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9fc:	20 91 38 02 	lds	r18, 0x0238
 a00:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a02:	09 f4       	brne	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x102>
 a04:	cf c0       	rjmp	.+414    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a06:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a0a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a0e:	80 ff       	sbrs	r24, 0
 a10:	1b c0       	rjmp	.+54     	; 0xa48 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a12:	33 30       	cpi	r19, 0x03	; 3
 a14:	21 f4       	brne	.+8      	; 0xa1e <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a16:	80 91 eb 00 	lds	r24, 0x00EB
 a1a:	80 62       	ori	r24, 0x20	; 32
 a1c:	13 c0       	rjmp	.+38     	; 0xa44 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a1e:	80 91 eb 00 	lds	r24, 0x00EB
 a22:	80 61       	ori	r24, 0x10	; 16
 a24:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <USB_Device_ProcessControlRequest+0x12e>
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	2a 95       	dec	r18
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <USB_Device_ProcessControlRequest+0x12a>
 a36:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a3a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a3e:	80 91 eb 00 	lds	r24, 0x00EB
 a42:	88 60       	ori	r24, 0x08	; 8
 a44:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a4c:	80 91 e8 00 	lds	r24, 0x00E8
 a50:	87 7f       	andi	r24, 0xF7	; 247
 a52:	89 c0       	rjmp	.+274    	; 0xb66 <USB_Device_ProcessControlRequest+0x262>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a54:	88 23       	and	r24, r24
 a56:	09 f0       	breq	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0x156>
 a58:	a5 c0       	rjmp	.+330    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a5a:	10 91 36 02 	lds	r17, 0x0236
 a5e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a60:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a62:	f8 94       	cli
 a64:	80 91 e8 00 	lds	r24, 0x00E8
 a68:	87 7f       	andi	r24, 0xF7	; 247
 a6a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a6e:	1b dd       	rcall	.-1482   	; 0x4a6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a70:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 a74:	80 ff       	sbrs	r24, 0
 a76:	fc cf       	rjmp	.-8      	; 0xa70 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a78:	80 91 e3 00 	lds	r24, 0x00E3
 a7c:	80 78       	andi	r24, 0x80	; 128
 a7e:	81 2b       	or	r24, r17

				UDADDR = Temp;
 a80:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 a84:	80 68       	ori	r24, 0x80	; 128
 a86:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a8a:	11 23       	and	r17, r17
 a8c:	11 f4       	brne	.+4      	; 0xa92 <USB_Device_ProcessControlRequest+0x18e>
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0x190>
 a92:	83 e0       	ldi	r24, 0x03	; 3
 a94:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a96:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
 a98:	85 c0       	rjmp	.+266    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a9a:	80 58       	subi	r24, 0x80	; 128
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x19e>
 aa0:	81 c0       	rjmp	.+258    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aa2:	80 91 36 02 	lds	r24, 0x0236
 aa6:	90 91 37 02 	lds	r25, 0x0237
 aaa:	23 e0       	ldi	r18, 0x03	; 3
 aac:	8c 3d       	cpi	r24, 0xDC	; 220
 aae:	92 07       	cpc	r25, r18
 ab0:	09 f0       	breq	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1b0>
 ab2:	33 c0       	rjmp	.+102    	; 0xb1a <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ab4:	83 e0       	ldi	r24, 0x03	; 3
 ab6:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ab8:	8a e2       	ldi	r24, 0x2A	; 42
 aba:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 abc:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 abe:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 ac0:	de 01       	movw	r26, r28
 ac2:	15 96       	adiw	r26, 0x05	; 5
 ac4:	6e e0       	ldi	r22, 0x0E	; 14
 ac6:	40 e0       	ldi	r20, 0x00	; 0
 ac8:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 aca:	11 e2       	ldi	r17, 0x21	; 33
 acc:	e6 2f       	mov	r30, r22
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	10 93 57 00 	sts	0x0057, r17
 ad4:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 ad6:	40 ff       	sbrs	r20, 0
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
 ada:	82 95       	swap	r24
 adc:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 ade:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ae0:	8f 70       	andi	r24, 0x0F	; 15
 ae2:	28 2f       	mov	r18, r24
 ae4:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ae6:	8a 30       	cpi	r24, 0x0A	; 10
 ae8:	18 f0       	brcs	.+6      	; 0xaf0 <USB_Device_ProcessControlRequest+0x1ec>
 aea:	c9 01       	movw	r24, r18
 aec:	c7 96       	adiw	r24, 0x37	; 55
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <USB_Device_ProcessControlRequest+0x1f0>
 af0:	c9 01       	movw	r24, r18
 af2:	c0 96       	adiw	r24, 0x30	; 48
 af4:	8d 93       	st	X+, r24
 af6:	9d 93       	st	X+, r25
 af8:	4f 5f       	subi	r20, 0xFF	; 255
 afa:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 afc:	44 31       	cpi	r20, 0x14	; 20
 afe:	51 05       	cpc	r21, r1
 b00:	29 f7       	brne	.-54     	; 0xacc <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b02:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b04:	80 91 e8 00 	lds	r24, 0x00E8
 b08:	87 7f       	andi	r24, 0xF7	; 247
 b0a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b0e:	ce 01       	movw	r24, r28
 b10:	03 96       	adiw	r24, 0x03	; 3
 b12:	6a e2       	ldi	r22, 0x2A	; 42
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	3b de       	rcall	.-906    	; 0x78e <Endpoint_Write_Control_Stream_LE>
 b18:	12 c0       	rjmp	.+36     	; 0xb3e <USB_Device_ProcessControlRequest+0x23a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b1a:	60 91 38 02 	lds	r22, 0x0238
 b1e:	ae 01       	movw	r20, r28
 b20:	4f 5f       	subi	r20, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
 b24:	7f dc       	rcall	.-1794   	; 0x424 <CALLBACK_USB_GetDescriptor>
 b26:	bc 01       	movw	r22, r24
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	09 f4       	brne	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x22a>
 b2c:	3b c0       	rjmp	.+118    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
 b2e:	80 91 e8 00 	lds	r24, 0x00E8
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	9a 81       	ldd	r25, Y+2	; 0x02
 b3c:	84 de       	rcall	.-760    	; 0x846 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b3e:	80 91 e8 00 	lds	r24, 0x00E8
 b42:	8b 77       	andi	r24, 0x7B	; 123
 b44:	80 93 e8 00 	sts	0x00E8, r24
 b48:	2d c0       	rjmp	.+90     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b4a:	80 38       	cpi	r24, 0x80	; 128
 b4c:	59 f5       	brne	.+86     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4e:	80 91 e8 00 	lds	r24, 0x00E8
 b52:	87 7f       	andi	r24, 0xF7	; 247
 b54:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b58:	80 91 30 02 	lds	r24, 0x0230
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b5c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b60:	80 91 e8 00 	lds	r24, 0x00E8
 b64:	8e 77       	andi	r24, 0x7E	; 126
 b66:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b6a:	9d dc       	rcall	.-1734   	; 0x4a6 <Endpoint_ClearStatusStage>
 b6c:	1b c0       	rjmp	.+54     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b6e:	88 23       	and	r24, r24
 b70:	c9 f4       	brne	.+50     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b72:	90 91 36 02 	lds	r25, 0x0236
 b76:	92 30       	cpi	r25, 0x02	; 2
 b78:	a8 f4       	brcc	.+42     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b7a:	80 91 e8 00 	lds	r24, 0x00E8
 b7e:	87 7f       	andi	r24, 0xF7	; 247
 b80:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b84:	90 93 30 02 	sts	0x0230, r25

	Endpoint_ClearStatusStage();
 b88:	8e dc       	rcall	.-1764   	; 0x4a6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b8a:	80 91 30 02 	lds	r24, 0x0230
 b8e:	88 23       	and	r24, r24
 b90:	31 f4       	brne	.+12     	; 0xb9e <USB_Device_ProcessControlRequest+0x29a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b92:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b96:	87 fd       	sbrc	r24, 7
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <USB_Device_ProcessControlRequest+0x29a>
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x29c>
 b9e:	84 e0       	ldi	r24, 0x04	; 4
 ba0:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 ba2:	9a db       	rcall	.-2252   	; 0x2d8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ba8:	83 ff       	sbrs	r24, 3
 baa:	0a c0       	rjmp	.+20     	; 0xbc0 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bac:	80 91 eb 00 	lds	r24, 0x00EB
 bb0:	80 62       	ori	r24, 0x20	; 32
 bb2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb6:	80 91 e8 00 	lds	r24, 0x00E8
 bba:	87 7f       	andi	r24, 0xF7	; 247
 bbc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bc0:	ac 96       	adiw	r28, 0x2c	; 44
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	de bf       	out	0x3e, r29	; 62
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	cd bf       	out	0x3d, r28	; 61
 bcc:	cf 91       	pop	r28
 bce:	df 91       	pop	r29
 bd0:	1f 91       	pop	r17
 bd2:	0f 91       	pop	r16
 bd4:	08 95       	ret

00000bd6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bd6:	08 95       	ret

00000bd8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bd8:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 bda:	8e b3       	in	r24, 0x1e	; 30
 bdc:	88 23       	and	r24, r24
 bde:	61 f0       	breq	.+24     	; 0xbf8 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 be0:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 be4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 be8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 bec:	83 ff       	sbrs	r24, 3
 bee:	01 c0       	rjmp	.+2      	; 0xbf2 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
 bf0:	89 de       	rcall	.-750    	; 0x904 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 bf2:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bf4:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
 bf8:	1f 91       	pop	r17
 bfa:	08 95       	ret

00000bfc <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 bfc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bfe:	8e b3       	in	r24, 0x1e	; 30
 c00:	84 30       	cpi	r24, 0x04	; 4
 c02:	21 f5       	brne	.+72     	; 0xc4c <CDC_Device_ReceiveByte+0x50>
 c04:	81 89       	ldd	r24, Z+17	; 0x11
 c06:	92 89       	ldd	r25, Z+18	; 0x12
 c08:	a3 89       	ldd	r26, Z+19	; 0x13
 c0a:	b4 89       	ldd	r27, Z+20	; 0x14
 c0c:	00 97       	sbiw	r24, 0x00	; 0
 c0e:	a1 05       	cpc	r26, r1
 c10:	b1 05       	cpc	r27, r1
 c12:	e1 f0       	breq	.+56     	; 0xc4c <CDC_Device_ReceiveByte+0x50>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 c14:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c16:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c1a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 c1e:	82 ff       	sbrs	r24, 2
 c20:	15 c0       	rjmp	.+42     	; 0xc4c <CDC_Device_ReceiveByte+0x50>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 c22:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 c26:	88 23       	and	r24, r24
 c28:	19 f4       	brne	.+6      	; 0xc30 <CDC_Device_ReceiveByte+0x34>
 c2a:	2f ef       	ldi	r18, 0xFF	; 255
 c2c:	3f ef       	ldi	r19, 0xFF	; 255
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c30:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 c34:	28 2f       	mov	r18, r24
 c36:	30 e0       	ldi	r19, 0x00	; 0
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 c38:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
 c3c:	88 23       	and	r24, r24
 c3e:	41 f4       	brne	.+16     	; 0xc50 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c40:	80 91 e8 00 	lds	r24, 0x00E8
 c44:	8b 77       	andi	r24, 0x7B	; 123
 c46:	80 93 e8 00 	sts	0x00E8, r24
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <CDC_Device_ReceiveByte+0x54>
 c4c:	2f ef       	ldi	r18, 0xFF	; 255
 c4e:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 c50:	c9 01       	movw	r24, r18
 c52:	08 95       	ret

00000c54 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 c54:	08 95       	ret

00000c56 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c56:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c58:	8e b3       	in	r24, 0x1e	; 30
 c5a:	84 30       	cpi	r24, 0x04	; 4
 c5c:	11 f5       	brne	.+68     	; 0xca2 <CDC_Device_Flush+0x4c>
 c5e:	81 89       	ldd	r24, Z+17	; 0x11
 c60:	92 89       	ldd	r25, Z+18	; 0x12
 c62:	a3 89       	ldd	r26, Z+19	; 0x13
 c64:	b4 89       	ldd	r27, Z+20	; 0x14
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	a1 05       	cpc	r26, r1
 c6a:	b1 05       	cpc	r27, r1
 c6c:	d1 f0       	breq	.+52     	; 0xca2 <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 c6e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c70:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 c74:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
 c78:	88 23       	and	r24, r24
 c7a:	a9 f0       	breq	.+42     	; 0xca6 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c7c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c80:	80 91 e8 00 	lds	r24, 0x00E8
 c84:	8e 77       	andi	r24, 0x7E	; 126
 c86:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 c8a:	95 fd       	sbrc	r25, 5
 c8c:	0c c0       	rjmp	.+24     	; 0xca6 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c8e:	2a dc       	rcall	.-1964   	; 0x4e4 <Endpoint_WaitUntilReady>
 c90:	98 2f       	mov	r25, r24
 c92:	88 23       	and	r24, r24
 c94:	49 f4       	brne	.+18     	; 0xca8 <CDC_Device_Flush+0x52>
 c96:	80 91 e8 00 	lds	r24, 0x00E8
 c9a:	8e 77       	andi	r24, 0x7E	; 126
 c9c:	80 93 e8 00 	sts	0x00E8, r24
 ca0:	03 c0       	rjmp	.+6      	; 0xca8 <CDC_Device_Flush+0x52>
 ca2:	92 e0       	ldi	r25, 0x02	; 2
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <CDC_Device_Flush+0x52>
 ca6:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 ca8:	89 2f       	mov	r24, r25
 caa:	08 95       	ret

00000cac <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cac:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cae:	8e b3       	in	r24, 0x1e	; 30
 cb0:	84 30       	cpi	r24, 0x04	; 4
 cb2:	51 f4       	brne	.+20     	; 0xcc8 <CDC_Device_USBTask+0x1c>
 cb4:	81 89       	ldd	r24, Z+17	; 0x11
 cb6:	92 89       	ldd	r25, Z+18	; 0x12
 cb8:	a3 89       	ldd	r26, Z+19	; 0x13
 cba:	b4 89       	ldd	r27, Z+20	; 0x14
 cbc:	00 97       	sbiw	r24, 0x00	; 0
 cbe:	a1 05       	cpc	r26, r1
 cc0:	b1 05       	cpc	r27, r1
 cc2:	11 f0       	breq	.+4      	; 0xcc8 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 cc4:	cf 01       	movw	r24, r30
 cc6:	c7 cf       	rjmp	.-114    	; 0xc56 <CDC_Device_Flush>
 cc8:	08 95       	ret

00000cca <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 cca:	1f 93       	push	r17
 ccc:	fc 01       	movw	r30, r24
 cce:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cd0:	8e b3       	in	r24, 0x1e	; 30
 cd2:	84 30       	cpi	r24, 0x04	; 4
 cd4:	d9 f4       	brne	.+54     	; 0xd0c <CDC_Device_SendByte+0x42>
 cd6:	81 89       	ldd	r24, Z+17	; 0x11
 cd8:	92 89       	ldd	r25, Z+18	; 0x12
 cda:	a3 89       	ldd	r26, Z+19	; 0x13
 cdc:	b4 89       	ldd	r27, Z+20	; 0x14
 cde:	00 97       	sbiw	r24, 0x00	; 0
 ce0:	a1 05       	cpc	r26, r1
 ce2:	b1 05       	cpc	r27, r1
 ce4:	99 f0       	breq	.+38     	; 0xd0c <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 ce6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ce8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 cec:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 cf0:	85 fd       	sbrc	r24, 5
 cf2:	08 c0       	rjmp	.+16     	; 0xd04 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cf4:	80 91 e8 00 	lds	r24, 0x00E8
 cf8:	8e 77       	andi	r24, 0x7E	; 126
 cfa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 cfe:	f2 db       	rcall	.-2076   	; 0x4e4 <Endpoint_WaitUntilReady>
 d00:	88 23       	and	r24, r24
 d02:	29 f4       	brne	.+10     	; 0xd0e <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d04:	10 93 f1 00 	sts	0x00F1, r17
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 d0c:	82 e0       	ldi	r24, 0x02	; 2
}
 d0e:	1f 91       	pop	r17
 d10:	08 95       	ret

00000d12 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d12:	1f 93       	push	r17
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 d1a:	0d 96       	adiw	r24, 0x0d	; 13
 d1c:	fc 01       	movw	r30, r24
 d1e:	8b e0       	ldi	r24, 0x0B	; 11
 d20:	df 01       	movw	r26, r30
 d22:	1d 92       	st	X+, r1
 d24:	8a 95       	dec	r24
 d26:	e9 f7       	brne	.-6      	; 0xd22 <CDC_Device_ConfigureEndpoints+0x10>
 d28:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 d2a:	89 81       	ldd	r24, Y+1	; 0x01
 d2c:	18 17       	cp	r17, r24
 d2e:	29 f4       	brne	.+10     	; 0xd3a <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 d30:	6a 81       	ldd	r22, Y+2	; 0x02
 d32:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 d34:	8c 81       	ldd	r24, Y+4	; 0x04
 d36:	52 e0       	ldi	r21, 0x02	; 2
 d38:	10 c0       	rjmp	.+32     	; 0xd5a <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 d3a:	8d 81       	ldd	r24, Y+5	; 0x05
 d3c:	18 17       	cp	r17, r24
 d3e:	31 f4       	brne	.+12     	; 0xd4c <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 d40:	6e 81       	ldd	r22, Y+6	; 0x06
 d42:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 d44:	88 85       	ldd	r24, Y+8	; 0x08
 d46:	52 e0       	ldi	r21, 0x02	; 2
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	08 c0       	rjmp	.+16     	; 0xd5c <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 d4c:	89 85       	ldd	r24, Y+9	; 0x09
 d4e:	18 17       	cp	r17, r24
 d50:	39 f5       	brne	.+78     	; 0xda0 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 d52:	6a 85       	ldd	r22, Y+10	; 0x0a
 d54:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 d56:	8c 85       	ldd	r24, Y+12	; 0x0c
 d58:	53 e0       	ldi	r21, 0x03	; 3
 d5a:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 d5c:	88 23       	and	r24, r24
 d5e:	11 f4       	brne	.+4      	; 0xd64 <CDC_Device_ConfigureEndpoints+0x52>
 d60:	40 e0       	ldi	r20, 0x00	; 0
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <CDC_Device_ConfigureEndpoints+0x54>
 d64:	44 e0       	ldi	r20, 0x04	; 4
 d66:	20 e0       	ldi	r18, 0x00	; 0
 d68:	88 e0       	ldi	r24, 0x08	; 8
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	03 c0       	rjmp	.+6      	; 0xd74 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 d6e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 d70:	88 0f       	add	r24, r24
 d72:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 d74:	86 17       	cp	r24, r22
 d76:	97 07       	cpc	r25, r23
 d78:	d0 f3       	brcs	.-12     	; 0xd6e <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 d7a:	85 2f       	mov	r24, r21
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	56 e0       	ldi	r21, 0x06	; 6
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	5a 95       	dec	r21
 d86:	e1 f7       	brne	.-8      	; 0xd80 <CDC_Device_ConfigureEndpoints+0x6e>
 d88:	60 e0       	ldi	r22, 0x00	; 0
 d8a:	31 11       	cpse	r19, r1
 d8c:	61 e0       	ldi	r22, 0x01	; 1
 d8e:	68 2b       	or	r22, r24
 d90:	42 60       	ori	r20, 0x02	; 2
 d92:	22 95       	swap	r18
 d94:	20 7f       	andi	r18, 0xF0	; 240
 d96:	42 2b       	or	r20, r18
 d98:	81 2f       	mov	r24, r17
 d9a:	72 db       	rcall	.-2332   	; 0x480 <Endpoint_ConfigureEndpoint_Prv>
 d9c:	88 23       	and	r24, r24
 d9e:	29 f0       	breq	.+10     	; 0xdaa <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 da0:	1f 5f       	subi	r17, 0xFF	; 255
 da2:	15 30       	cpi	r17, 0x05	; 5
 da4:	09 f0       	breq	.+2      	; 0xda8 <CDC_Device_ConfigureEndpoints+0x96>
 da6:	c1 cf       	rjmp	.-126    	; 0xd2a <CDC_Device_ConfigureEndpoints+0x18>
 da8:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 daa:	df 91       	pop	r29
 dac:	cf 91       	pop	r28
 dae:	1f 91       	pop	r17
 db0:	08 95       	ret

00000db2 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 db8:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 dbc:	83 ff       	sbrs	r24, 3
 dbe:	9d c0       	rjmp	.+314    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 dc0:	88 81       	ld	r24, Y
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	20 91 38 02 	lds	r18, 0x0238
 dc8:	30 91 39 02 	lds	r19, 0x0239
 dcc:	28 17       	cp	r18, r24
 dce:	39 07       	cpc	r19, r25
 dd0:	09 f0       	breq	.+2      	; 0xdd4 <CDC_Device_ProcessControlRequest+0x22>
 dd2:	93 c0       	rjmp	.+294    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
	  return;

	switch (USB_ControlRequest.bRequest)
 dd4:	80 91 35 02 	lds	r24, 0x0235
 dd8:	81 32       	cpi	r24, 0x21	; 33
 dda:	69 f0       	breq	.+26     	; 0xdf6 <CDC_Device_ProcessControlRequest+0x44>
 ddc:	82 32       	cpi	r24, 0x22	; 34
 dde:	20 f4       	brcc	.+8      	; 0xde8 <CDC_Device_ProcessControlRequest+0x36>
 de0:	80 32       	cpi	r24, 0x20	; 32
 de2:	09 f0       	breq	.+2      	; 0xde6 <CDC_Device_ProcessControlRequest+0x34>
 de4:	8a c0       	rjmp	.+276    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
 de6:	3c c0       	rjmp	.+120    	; 0xe60 <CDC_Device_ProcessControlRequest+0xae>
 de8:	82 32       	cpi	r24, 0x22	; 34
 dea:	09 f4       	brne	.+2      	; 0xdee <CDC_Device_ProcessControlRequest+0x3c>
 dec:	65 c0       	rjmp	.+202    	; 0xeb8 <CDC_Device_ProcessControlRequest+0x106>
 dee:	83 32       	cpi	r24, 0x23	; 35
 df0:	09 f0       	breq	.+2      	; 0xdf4 <CDC_Device_ProcessControlRequest+0x42>
 df2:	83 c0       	rjmp	.+262    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
 df4:	74 c0       	rjmp	.+232    	; 0xede <CDC_Device_ProcessControlRequest+0x12c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 df6:	80 91 34 02 	lds	r24, 0x0234
 dfa:	81 3a       	cpi	r24, 0xA1	; 161
 dfc:	09 f0       	breq	.+2      	; 0xe00 <CDC_Device_ProcessControlRequest+0x4e>
 dfe:	7d c0       	rjmp	.+250    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e00:	80 91 e8 00 	lds	r24, 0x00E8
 e04:	87 7f       	andi	r24, 0xF7	; 247
 e06:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e0a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 e0e:	80 ff       	sbrs	r24, 0
 e10:	fc cf       	rjmp	.-8      	; 0xe0a <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e12:	89 89       	ldd	r24, Y+17	; 0x11
 e14:	9a 89       	ldd	r25, Y+18	; 0x12
 e16:	ab 89       	ldd	r26, Y+19	; 0x13
 e18:	bc 89       	ldd	r27, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e1a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 e1e:	29 2f       	mov	r18, r25
 e20:	3a 2f       	mov	r19, r26
 e22:	4b 2f       	mov	r20, r27
 e24:	55 27       	eor	r21, r21
 e26:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
 e2a:	9d 01       	movw	r18, r26
 e2c:	44 27       	eor	r20, r20
 e2e:	55 27       	eor	r21, r21
 e30:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
 e34:	8b 2f       	mov	r24, r27
 e36:	99 27       	eor	r25, r25
 e38:	aa 27       	eor	r26, r26
 e3a:	bb 27       	eor	r27, r27
 e3c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e40:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e42:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 e46:	8e 89       	ldd	r24, Y+22	; 0x16
 e48:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 e4c:	8f 89       	ldd	r24, Y+23	; 0x17
 e4e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e52:	80 91 e8 00 	lds	r24, 0x00E8
 e56:	8e 77       	andi	r24, 0x7E	; 126
 e58:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 e5c:	24 db       	rcall	.-2488   	; 0x4a6 <Endpoint_ClearStatusStage>
 e5e:	4d c0       	rjmp	.+154    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e60:	80 91 34 02 	lds	r24, 0x0234
 e64:	81 32       	cpi	r24, 0x21	; 33
 e66:	09 f0       	breq	.+2      	; 0xe6a <CDC_Device_ProcessControlRequest+0xb8>
 e68:	48 c0       	rjmp	.+144    	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e6a:	80 91 e8 00 	lds	r24, 0x00E8
 e6e:	87 7f       	andi	r24, 0xF7	; 247
 e70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e74:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
 e78:	82 ff       	sbrs	r24, 2
 e7a:	fc cf       	rjmp	.-8      	; 0xe74 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e7c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 e80:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 e84:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
 e88:	30 91 f1 00 	lds	r19, 0x00F1

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 e8c:	89 8b       	std	Y+17, r24	; 0x11
 e8e:	9a 8b       	std	Y+18, r25	; 0x12
 e90:	2b 8b       	std	Y+19, r18	; 0x13
 e92:	3c 8b       	std	Y+20, r19	; 0x14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e94:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 e98:	8d 8b       	std	Y+21, r24	; 0x15
 e9a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e9e:	8e 8b       	std	Y+22, r24	; 0x16
 ea0:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 ea4:	8f 8b       	std	Y+23, r24	; 0x17
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ea6:	80 91 e8 00 	lds	r24, 0x00E8
 eaa:	8b 77       	andi	r24, 0x7B	; 123
 eac:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 eb0:	fa da       	rcall	.-2572   	; 0x4a6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 eb2:	ce 01       	movw	r24, r28
 eb4:	cc d9       	rcall	.-3176   	; 0x24e <EVENT_CDC_Device_LineEncodingChanged>
 eb6:	21 c0       	rjmp	.+66     	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 eb8:	80 91 34 02 	lds	r24, 0x0234
 ebc:	81 32       	cpi	r24, 0x21	; 33
 ebe:	e9 f4       	brne	.+58     	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ec0:	80 91 e8 00 	lds	r24, 0x00E8
 ec4:	87 7f       	andi	r24, 0xF7	; 247
 ec6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 eca:	ed da       	rcall	.-2598   	; 0x4a6 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ecc:	80 91 36 02 	lds	r24, 0x0236
 ed0:	90 91 37 02 	lds	r25, 0x0237
 ed4:	9e 87       	std	Y+14, r25	; 0x0e
 ed6:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 ed8:	ce 01       	movw	r24, r28
 eda:	bc de       	rcall	.-648    	; 0xc54 <CDC_Device_Event_Stub>
 edc:	0e c0       	rjmp	.+28     	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ede:	80 91 34 02 	lds	r24, 0x0234
 ee2:	81 32       	cpi	r24, 0x21	; 33
 ee4:	51 f4       	brne	.+20     	; 0xefa <CDC_Device_ProcessControlRequest+0x148>
 ee6:	80 91 e8 00 	lds	r24, 0x00E8
 eea:	87 7f       	andi	r24, 0xF7	; 247
 eec:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ef0:	da da       	rcall	.-2636   	; 0x4a6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 ef2:	ce 01       	movw	r24, r28
 ef4:	60 91 36 02 	lds	r22, 0x0236
 ef8:	ad de       	rcall	.-678    	; 0xc54 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 efa:	df 91       	pop	r29
 efc:	cf 91       	pop	r28
 efe:	08 95       	ret

00000f00 <__udivmodsi4>:
 f00:	a1 e2       	ldi	r26, 0x21	; 33
 f02:	1a 2e       	mov	r1, r26
 f04:	aa 1b       	sub	r26, r26
 f06:	bb 1b       	sub	r27, r27
 f08:	fd 01       	movw	r30, r26
 f0a:	0d c0       	rjmp	.+26     	; 0xf26 <__udivmodsi4_ep>

00000f0c <__udivmodsi4_loop>:
 f0c:	aa 1f       	adc	r26, r26
 f0e:	bb 1f       	adc	r27, r27
 f10:	ee 1f       	adc	r30, r30
 f12:	ff 1f       	adc	r31, r31
 f14:	a2 17       	cp	r26, r18
 f16:	b3 07       	cpc	r27, r19
 f18:	e4 07       	cpc	r30, r20
 f1a:	f5 07       	cpc	r31, r21
 f1c:	20 f0       	brcs	.+8      	; 0xf26 <__udivmodsi4_ep>
 f1e:	a2 1b       	sub	r26, r18
 f20:	b3 0b       	sbc	r27, r19
 f22:	e4 0b       	sbc	r30, r20
 f24:	f5 0b       	sbc	r31, r21

00000f26 <__udivmodsi4_ep>:
 f26:	66 1f       	adc	r22, r22
 f28:	77 1f       	adc	r23, r23
 f2a:	88 1f       	adc	r24, r24
 f2c:	99 1f       	adc	r25, r25
 f2e:	1a 94       	dec	r1
 f30:	69 f7       	brne	.-38     	; 0xf0c <__udivmodsi4_loop>
 f32:	60 95       	com	r22
 f34:	70 95       	com	r23
 f36:	80 95       	com	r24
 f38:	90 95       	com	r25
 f3a:	9b 01       	movw	r18, r22
 f3c:	ac 01       	movw	r20, r24
 f3e:	bd 01       	movw	r22, r26
 f40:	cf 01       	movw	r24, r30
 f42:	08 95       	ret

00000f44 <_exit>:
 f44:	f8 94       	cli

00000f46 <__stop_program>:
 f46:	ff cf       	rjmp	.-2      	; 0xf46 <__stop_program>
