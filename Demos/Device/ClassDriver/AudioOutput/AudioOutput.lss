
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001028  000010bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  000010c8  2**0
                  ALLOC
  3 .debug_aranges 00000480  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cc2  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008503  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000208f  00000000  00000000  0000a70d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000661a  00000000  00000000  0000c79c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  00012db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000364d  00000000  00000000  00013478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003783  00000000  00000000  00016ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005a0  00000000  00000000  0001a248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c2       	rjmp	.+1506   	; 0x60c <__vector_10>
      2a:	00 00       	nop
      2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
      46:	00 00       	nop
      48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
      52:	00 00       	nop
      54:	a4 c0       	rjmp	.+328    	; 0x19e <__vector_21>
      56:	00 00       	nop
      58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
      92:	00 00       	nop
      94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 00 02 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
      a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
      ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
      ca:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
      da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
      ea:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
      fa:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     10a:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000011a <LanguageString>:
     11a:	04 03 09 04                                         ....

0000011e <ManufacturerString>:
     11e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     12e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000138 <ProductString>:
     138:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
     148:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
     158:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e2       	ldi	r29, 0x20	; 32
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e8 e2       	ldi	r30, 0x28	; 40
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	ac 30       	cpi	r26, 0x0C	; 12
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	ac e0       	ldi	r26, 0x0C	; 12
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a9 31       	cpi	r26, 0x19	; 25
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	4e d1       	rcall	.+668    	; 0x436 <main>
     19a:	44 c7       	rjmp	.+3720   	; 0x1024 <_exit>

0000019c <__bad_interrupt>:
     19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <__vector_21>:
	USB_Init();
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	2f 93       	push	r18
     1aa:	3f 93       	push	r19
     1ac:	4f 93       	push	r20
     1ae:	5f 93       	push	r21
     1b0:	6f 93       	push	r22
     1b2:	7f 93       	push	r23
     1b4:	8f 93       	push	r24
     1b6:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     1b8:	70 91 e9 00 	lds	r23, 0x00E9
			 */
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			                                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			{
				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnabled))
     1bc:	80 91 10 01 	lds	r24, 0x0110
     1c0:	84 30       	cpi	r24, 0x04	; 4
     1c2:	09 f0       	breq	.+2      	; 0x1c6 <__vector_21+0x28>
     1c4:	62 c0       	rjmp	.+196    	; 0x28a <__vector_21+0xec>
     1c6:	80 91 07 01 	lds	r24, 0x0107
     1ca:	88 23       	and	r24, r24
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <__vector_21+0x32>
     1ce:	5d c0       	rjmp	.+186    	; 0x28a <__vector_21+0xec>
				  return false;

				Endpoint_SelectEndpoint(AudioInterfaceInfo->Config.DataOUTEndpointNumber);
     1d0:	80 91 04 01 	lds	r24, 0x0104
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     1d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1d8:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Device_IsSampleReceived(&Speaker_Audio_Interface))
     1dc:	82 ff       	sbrs	r24, 2
     1de:	55 c0       	rjmp	.+170    	; 0x28a <__vector_21+0xec>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     1e0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     1e4:	90 91 f1 00 	lds	r25, 0x00F1

				return Data.Value;
     1e8:	9c 01       	movw	r18, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     1ea:	80 91 f2 00 	lds	r24, 0x00F2
     1ee:	90 91 f3 00 	lds	r25, 0x00F3

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Endpoint_Read_16_LE();

				if (!(Endpoint_BytesInEndpoint()))
     1f2:	89 2b       	or	r24, r25
     1f4:	29 f4       	brne	.+10     	; 0x200 <__vector_21+0x62>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     1f6:	80 91 e8 00 	lds	r24, 0x00E8
     1fa:	8b 77       	andi	r24, 0x7B	; 123
     1fc:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     200:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     204:	90 91 f1 00 	lds	r25, 0x00F1

				return Data.Value;
     208:	ac 01       	movw	r20, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     20a:	80 91 f2 00 	lds	r24, 0x00F2
     20e:	90 91 f3 00 	lds	r25, 0x00F3
     212:	89 2b       	or	r24, r25
     214:	29 f4       	brne	.+10     	; 0x220 <__vector_21+0x82>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     216:	80 91 e8 00 	lds	r24, 0x00E8
     21a:	8b 77       	andi	r24, 0x7B	; 123
     21c:	80 93 e8 00 	sts	0x00E8, r24
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit  = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);
		int8_t RightSample_8Bit = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
     220:	23 2f       	mov	r18, r19
     222:	33 0f       	add	r19, r19
     224:	33 0b       	sbc	r19, r19
     226:	33 27       	eor	r19, r19
     228:	27 fd       	sbrc	r18, 7
     22a:	30 95       	com	r19
     22c:	45 2f       	mov	r20, r21
     22e:	55 0f       	add	r21, r21
     230:	55 0b       	sbc	r21, r21
     232:	55 27       	eor	r21, r21
     234:	47 fd       	sbrc	r20, 7
     236:	50 95       	com	r21
     238:	ca 01       	movw	r24, r20
     23a:	82 0f       	add	r24, r18
     23c:	93 1f       	adc	r25, r19
     23e:	95 95       	asr	r25
     240:	87 95       	ror	r24
     242:	68 2f       	mov	r22, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
     244:	80 e8       	ldi	r24, 0x80	; 128
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 27       	eor	r18, r24
     24a:	39 27       	eor	r19, r25
     24c:	30 93 99 00 	sts	0x0099, r19
     250:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
     254:	48 27       	eor	r20, r24
     256:	59 27       	eor	r21, r25
     258:	50 93 9b 00 	sts	0x009B, r21
     25c:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
     260:	61 31       	cpi	r22, 0x11	; 17
     262:	14 f0       	brlt	.+4      	; 0x268 <__vector_21+0xca>
     264:	90 ef       	ldi	r25, 0xF0	; 240
     266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
     268:	69 30       	cpi	r22, 0x09	; 9
     26a:	14 f0       	brlt	.+4      	; 0x270 <__vector_21+0xd2>
     26c:	90 eb       	ldi	r25, 0xB0	; 176
     26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
     270:	65 30       	cpi	r22, 0x05	; 5
     272:	14 f0       	brlt	.+4      	; 0x278 <__vector_21+0xda>
     274:	90 e3       	ldi	r25, 0x30	; 48
     276:	05 c0       	rjmp	.+10     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
     278:	63 30       	cpi	r22, 0x03	; 3
     27a:	14 f0       	brlt	.+4      	; 0x280 <__vector_21+0xe2>
     27c:	90 e1       	ldi	r25, 0x10	; 16
     27e:	01 c0       	rjmp	.+2      	; 0x282 <__vector_21+0xe4>
     280:	90 e0       	ldi	r25, 0x00	; 0
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     282:	8b b1       	in	r24, 0x0b	; 11
     284:	8f 70       	andi	r24, 0x0F	; 15
     286:	98 2b       	or	r25, r24
     288:	9b b9       	out	0x0b, r25	; 11
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     28a:	7f 70       	andi	r23, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     28c:	70 93 e9 00 	sts	0x00E9, r23

		LEDs_SetAllLEDs(LEDMask);
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	7f 91       	pop	r23
     296:	6f 91       	pop	r22
     298:	5f 91       	pop	r21
     29a:	4f 91       	pop	r20
     29c:	3f 91       	pop	r19
     29e:	2f 91       	pop	r18
     2a0:	0f 90       	pop	r0
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	0f 90       	pop	r0
     2a6:	1f 90       	pop	r1
     2a8:	18 95       	reti

000002aa <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     2aa:	1f 93       	push	r17
     2ac:	8b b1       	in	r24, 0x0b	; 11
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	80 6a       	ori	r24, 0xA0	; 160
     2b2:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     2b4:	12 e0       	ldi	r17, 0x02	; 2
     2b6:	10 93 6e 00 	sts	0x006E, r17
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     2ba:	20 91 08 01 	lds	r18, 0x0108
     2be:	30 91 09 01 	lds	r19, 0x0109
     2c2:	40 91 0a 01 	lds	r20, 0x010A
     2c6:	50 91 0b 01 	lds	r21, 0x010B
     2ca:	60 e4       	ldi	r22, 0x40	; 64
     2cc:	72 e4       	ldi	r23, 0x42	; 66
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	86 d6       	rcall	.+3340   	; 0xfe0 <__udivmodsi4>
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     2d8:	14 bd       	out	0x24, r17	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     2da:	15 bd       	out	0x25, r17	; 37
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC   |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC   |= ((1 << 6) | (1 << 5));
     2dc:	87 b1       	in	r24, 0x07	; 7
     2de:	80 66       	ori	r24, 0x60	; 96
     2e0:	87 b9       	out	0x07, r24	; 7
	DDRC   |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
     2e2:	81 ef       	ldi	r24, 0xF1	; 241
     2e4:	80 93 90 00 	sts	0x0090, r24
	        | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     2e8:	89 e0       	ldi	r24, 0x09	; 9
     2ea:	80 93 91 00 	sts	0x0091, r24
	#endif
}
     2ee:	1f 91       	pop	r17
     2f0:	08 95       	ret

000002f2 <EVENT_USB_Device_Disconnect>:
     2f2:	8b b1       	in	r24, 0x0b	; 11
     2f4:	8f 70       	andi	r24, 0x0F	; 15
     2f6:	80 61       	ori	r24, 0x10	; 16
     2f8:	8b b9       	out	0x0b, r24	; 11
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Stop the sample reload timer */
	TCCR0B = 0;
     2fa:	15 bc       	out	0x25, r1	; 37

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* Stop the PWM generation timer */
	TCCR3B = 0;
     2fc:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
     300:	87 b1       	in	r24, 0x07	; 7
     302:	8f 79       	andi	r24, 0x9F	; 159
     304:	87 b9       	out	0x07, r24	; 7
	#elif defined(AUDIO_OUT_PORTC)
	/* Set PORTC low */
	PORTC = 0x00;
	#endif
}
     306:	08 95       	ret

00000308 <CALLBACK_Audio_Device_GetSetEndpointProperty>:
                                                  const uint8_t EndpointProperty,
                                                  const uint8_t EndpointAddress,
                                                  const uint8_t EndpointControl,
                                                  uint16_t* const DataLength,
                                                  uint8_t* Data)
{
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	f8 01       	movw	r30, r16
     316:	e7 01       	movw	r28, r14
	/* Check the requested endpoint to see if a supported endpoint is being manipulated */
	if (EndpointAddress == (ENDPOINT_DIR_OUT | Speaker_Audio_Interface.Config.DataOUTEndpointNumber))
     318:	80 91 04 01 	lds	r24, 0x0104
     31c:	48 17       	cp	r20, r24
     31e:	09 f0       	breq	.+2      	; 0x322 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x1a>
     320:	52 c0       	rjmp	.+164    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
	{
		/* Check the requested control to see if a supported control is being manipulated */
		if (EndpointControl == AUDIO_EPCONTROL_SamplingFreq)
     322:	21 30       	cpi	r18, 0x01	; 1
     324:	09 f0       	breq	.+2      	; 0x328 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x20>
     326:	4f c0       	rjmp	.+158    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
		{
			switch (EndpointProperty)
     328:	61 30       	cpi	r22, 0x01	; 1
     32a:	21 f0       	breq	.+8      	; 0x334 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2c>
     32c:	61 38       	cpi	r22, 0x81	; 129
     32e:	09 f0       	breq	.+2      	; 0x332 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2a>
     330:	4a c0       	rjmp	.+148    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
     332:	2f c0       	rjmp	.+94     	; 0x392 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x8a>
			{
				case AUDIO_REQ_SetCurrent:
					/* Check if we are just testing for a valid property, or actually adjusting it */
					if (DataLength != NULL)
     334:	01 15       	cp	r16, r1
     336:	11 05       	cpc	r17, r1
     338:	09 f4       	brne	.+2      	; 0x33c <CALLBACK_Audio_Device_GetSetEndpointProperty+0x34>
     33a:	47 c0       	rjmp	.+142    	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					{
						/* Set the new sampling frequency to the value given by the host */
						CurrentAudioSampleFrequency = (((uint32_t)Data[2] << 16) | ((uint32_t)Data[1] << 8) | (uint32_t)Data[0]);
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	a9 01       	movw	r20, r18
     346:	33 27       	eor	r19, r19
     348:	22 27       	eor	r18, r18
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	ba 2f       	mov	r27, r26
     354:	a9 2f       	mov	r26, r25
     356:	98 2f       	mov	r25, r24
     358:	88 27       	eor	r24, r24
     35a:	28 2b       	or	r18, r24
     35c:	39 2b       	or	r19, r25
     35e:	4a 2b       	or	r20, r26
     360:	5b 2b       	or	r21, r27
     362:	88 81       	ld	r24, Y
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	28 2b       	or	r18, r24
     36c:	39 2b       	or	r19, r25
     36e:	4a 2b       	or	r20, r26
     370:	5b 2b       	or	r21, r27
     372:	20 93 08 01 	sts	0x0108, r18
     376:	30 93 09 01 	sts	0x0109, r19
     37a:	40 93 0a 01 	sts	0x010A, r20
     37e:	50 93 0b 01 	sts	0x010B, r21

						/* Adjust sample reload timer to the new frequency */
						OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     382:	60 e4       	ldi	r22, 0x40	; 64
     384:	72 e4       	ldi	r23, 0x42	; 66
     386:	8f e0       	ldi	r24, 0x0F	; 15
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2a d6       	rcall	.+3156   	; 0xfe0 <__udivmodsi4>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	27 bd       	out	0x27, r18	; 39
     390:	1c c0       	rjmp	.+56     	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					}

					return true;
				case AUDIO_REQ_GetCurrent:
					/* Check if we are just testing for a valid property, or actually reading it */
					if (DataLength != NULL)
     392:	01 15       	cp	r16, r1
     394:	11 05       	cpc	r17, r1
     396:	c9 f0       	breq	.+50     	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					{
						*DataLength = 3;
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24

						Data[2] = (CurrentAudioSampleFrequency >> 16);
     3a0:	20 91 08 01 	lds	r18, 0x0108
     3a4:	30 91 09 01 	lds	r19, 0x0109
     3a8:	40 91 0a 01 	lds	r20, 0x010A
     3ac:	50 91 0b 01 	lds	r21, 0x010B
     3b0:	ca 01       	movw	r24, r20
     3b2:	aa 27       	eor	r26, r26
     3b4:	bb 27       	eor	r27, r27
     3b6:	8a 83       	std	Y+2, r24	; 0x02
						Data[1] = (CurrentAudioSampleFrequency >> 8);
     3b8:	bb 27       	eor	r27, r27
     3ba:	a5 2f       	mov	r26, r21
     3bc:	94 2f       	mov	r25, r20
     3be:	83 2f       	mov	r24, r19
     3c0:	89 83       	std	Y+1, r24	; 0x01
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);
     3c2:	28 83       	st	Y, r18
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc4>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return false;
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	08 95       	ret

000003da <CALLBACK_Audio_Device_GetSetInterfaceProperty>:
                                                   uint16_t* const DataLength,
                                                   uint8_t* Data) 
{
	/* No audio interface entities in the device descriptor, thus no properties to get or set. */
	return false;
}
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	08 95       	ret

000003de <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	Audio_Device_ProcessControlRequest(&Speaker_Audio_Interface);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	91 e0       	ldi	r25, 0x01	; 1
}
     3e2:	8c c4       	rjmp	.+2328   	; 0xcfc <Audio_Device_ProcessControlRequest>

000003e4 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= Audio_Device_ConfigureEndpoints(&Speaker_Audio_Interface);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	59 d4       	rcall	.+2226   	; 0xc9c <Audio_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3ea:	80 fd       	sbrc	r24, 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <EVENT_USB_Device_ConfigurationChanged+0xe>
     3ee:	90 e9       	ldi	r25, 0x90	; 144
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <EVENT_USB_Device_ConfigurationChanged+0x10>
     3f2:	90 e6       	ldi	r25, 0x60	; 96
     3f4:	8b b1       	in	r24, 0x0b	; 11
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	98 2b       	or	r25, r24
     3fa:	9b b9       	out	0x0b, r25	; 11
}
     3fc:	08 95       	ret

000003fe <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3fe:	84 b7       	in	r24, 0x34	; 52
     400:	87 7f       	andi	r24, 0xF7	; 247
     402:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     404:	88 e1       	ldi	r24, 0x18	; 24
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	80 93 60 00 	sts	0x0060, r24
     40e:	10 92 60 00 	sts	0x0060, r1
     412:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	20 e8       	ldi	r18, 0x80	; 128
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	20 93 61 00 	sts	0x0061, r18
     422:	80 93 61 00 	sts	0x0061, r24
     426:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     428:	8a b1       	in	r24, 0x0a	; 10
     42a:	80 6f       	ori	r24, 0xF0	; 240
     42c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42e:	8b b1       	in	r24, 0x0b	; 11
     430:	8f 70       	andi	r24, 0x0F	; 15
     432:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     434:	d5 c0       	rjmp	.+426    	; 0x5e0 <USB_Init>

00000436 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     436:	e3 df       	rcall	.-58     	; 0x3fe <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     438:	8b b1       	in	r24, 0x0b	; 11
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	80 61       	ori	r24, 0x10	; 16
     43e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     440:	78 94       	sei

	for (;;)
	{
		Audio_Device_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     442:	18 d4       	rcall	.+2096   	; 0xc74 <USB_USBTask>
     444:	fe cf       	rjmp	.-4      	; 0x442 <main+0xc>

00000446 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     446:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     448:	92 30       	cpi	r25, 0x02	; 2
     44a:	49 f0       	breq	.+18     	; 0x45e <CALLBACK_USB_GetDescriptor+0x18>
     44c:	93 30       	cpi	r25, 0x03	; 3
     44e:	61 f0       	breq	.+24     	; 0x468 <CALLBACK_USB_GetDescriptor+0x22>
     450:	91 30       	cpi	r25, 0x01	; 1
     452:	f9 f4       	brne	.+62     	; 0x492 <CALLBACK_USB_GetDescriptor+0x4c>
     454:	e8 e9       	ldi	r30, 0x98	; 152
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	22 e1       	ldi	r18, 0x12	; 18
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	1e c0       	rjmp	.+60     	; 0x49a <CALLBACK_USB_GetDescriptor+0x54>
     45e:	ea ea       	ldi	r30, 0xAA	; 170
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	20 e7       	ldi	r18, 0x70	; 112
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	19 c0       	rjmp	.+50     	; 0x49a <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	49 f0       	breq	.+18     	; 0x47e <CALLBACK_USB_GetDescriptor+0x38>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	18 f0       	brcs	.+6      	; 0x476 <CALLBACK_USB_GetDescriptor+0x30>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	79 f4       	brne	.+30     	; 0x492 <CALLBACK_USB_GetDescriptor+0x4c>
     474:	08 c0       	rjmp	.+16     	; 0x486 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     476:	ea e1       	ldi	r30, 0x1A	; 26
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	84 91       	lpm	r24, Z+
     47c:	07 c0       	rjmp	.+14     	; 0x48c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     47e:	ee e1       	ldi	r30, 0x1E	; 30
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	84 91       	lpm	r24, Z+
     484:	03 c0       	rjmp	.+6      	; 0x48c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     486:	e8 e3       	ldi	r30, 0x38	; 56
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	84 91       	lpm	r24, Z+
     48c:	28 2f       	mov	r18, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	04 c0       	rjmp	.+8      	; 0x49a <CALLBACK_USB_GetDescriptor+0x54>
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     49a:	ed 93       	st	X+, r30
     49c:	fc 93       	st	X, r31
	return Size;
}
     49e:	c9 01       	movw	r24, r18
     4a0:	08 95       	ret

000004a2 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     4a2:	38 2f       	mov	r19, r24
     4a4:	28 2f       	mov	r18, r24
     4a6:	2c c0       	rjmp	.+88     	; 0x500 <Endpoint_ConfigureEndpoint_Prv+0x5e>
     4a8:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     4ac:	23 17       	cp	r18, r19
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv+0x16>
     4b0:	76 2f       	mov	r23, r22
     4b2:	94 2f       	mov	r25, r20
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     4b8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     4bc:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     4c0:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     4c4:	91 ff       	sbrs	r25, 1
     4c6:	1b c0       	rjmp	.+54     	; 0x4fe <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     4c8:	80 91 eb 00 	lds	r24, 0x00EB
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     4d2:	80 91 ed 00 	lds	r24, 0x00ED
     4d6:	8d 7f       	andi	r24, 0xFD	; 253
     4d8:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     4dc:	80 91 eb 00 	lds	r24, 0x00EB
     4e0:	81 60       	ori	r24, 0x01	; 1
     4e2:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     4e6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     4ea:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     4ee:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     4f2:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     4f6:	87 fd       	sbrc	r24, 7
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     4fe:	2f 5f       	subi	r18, 0xFF	; 255
     500:	27 30       	cpi	r18, 0x07	; 7
     502:	90 f2       	brcs	.-92     	; 0x4a8 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     504:	30 93 e9 00 	sts	0x00E9, r19
     508:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     50a:	08 95       	ret

0000050c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     50c:	80 91 11 01 	lds	r24, 0x0111
     510:	88 23       	and	r24, r24
     512:	9c f4       	brge	.+38     	; 0x53a <Endpoint_ClearStatusStage+0x2e>
     514:	04 c0       	rjmp	.+8      	; 0x51e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     516:	80 91 10 01 	lds	r24, 0x0110
     51a:	88 23       	and	r24, r24
     51c:	b9 f0       	breq	.+46     	; 0x54c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     51e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     522:	82 ff       	sbrs	r24, 2
     524:	f8 cf       	rjmp	.-16     	; 0x516 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     526:	80 91 e8 00 	lds	r24, 0x00E8
     52a:	8b 77       	andi	r24, 0x7B	; 123
     52c:	80 93 e8 00 	sts	0x00E8, r24
     530:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     532:	80 91 10 01 	lds	r24, 0x0110
     536:	88 23       	and	r24, r24
     538:	49 f0       	breq	.+18     	; 0x54c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     53a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     53e:	80 ff       	sbrs	r24, 0
     540:	f8 cf       	rjmp	.-16     	; 0x532 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     542:	80 91 e8 00 	lds	r24, 0x00E8
     546:	8e 77       	andi	r24, 0x7E	; 126
     548:	80 93 e8 00 	sts	0x00E8, r24
     54c:	08 95       	ret

0000054e <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     556:	4d d0       	rcall	.+154    	; 0x5f2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     558:	54 d0       	rcall	.+168    	; 0x602 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     55a:	08 ed       	ldi	r16, 0xD8	; 216
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	f8 01       	movw	r30, r16
     560:	80 81       	ld	r24, Z
     562:	8f 77       	andi	r24, 0x7F	; 127
     564:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     566:	80 81       	ld	r24, Z
     568:	80 68       	ori	r24, 0x80	; 128
     56a:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     56c:	80 81       	ld	r24, Z
     56e:	8f 7d       	andi	r24, 0xDF	; 223
     570:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     572:	e7 ed       	ldi	r30, 0xD7	; 215
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	80 68       	ori	r24, 0x80	; 128
     57a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     57c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     57e:	10 92 10 01 	sts	0x0110, r1
	USB_Device_ConfigurationNumber  = 0;
     582:	10 92 0c 01 	sts	0x010C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     586:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     58a:	10 92 0d 01 	sts	0x010D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     58e:	80 ee       	ldi	r24, 0xE0	; 224
     590:	e8 2e       	mov	r14, r24
     592:	f1 2c       	mov	r15, r1
     594:	f7 01       	movw	r30, r14
     596:	80 81       	ld	r24, Z
     598:	8b 7f       	andi	r24, 0xFB	; 251
     59a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     59c:	f8 01       	movw	r30, r16
     59e:	80 81       	ld	r24, Z
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	42 e0       	ldi	r20, 0x02	; 2
     5aa:	7b df       	rcall	.-266    	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5ac:	e1 ee       	ldi	r30, 0xE1	; 225
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5b6:	e2 ee       	ldi	r30, 0xE2	; 226
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     5c0:	80 81       	ld	r24, Z
     5c2:	88 60       	ori	r24, 0x08	; 8
     5c4:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     5c6:	f7 01       	movw	r30, r14
     5c8:	80 81       	ld	r24, Z
     5ca:	8e 7f       	andi	r24, 0xFE	; 254
     5cc:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     5ce:	f8 01       	movw	r30, r16
     5d0:	80 81       	ld	r24, Z
     5d2:	80 61       	ori	r24, 0x10	; 16
     5d4:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     5e0:	e7 ed       	ldi	r30, 0xD7	; 215
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	81 60       	ori	r24, 0x01	; 1
     5e8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 0f 01 	sts	0x010F, r24

	USB_ResetInterface();
}
     5f0:	ae cf       	rjmp	.-164    	; 0x54e <USB_ResetInterface>

000005f2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     5f2:	e8 ed       	ldi	r30, 0xD8	; 216
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8c 7f       	andi	r24, 0xFC	; 252
     5fa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     5fc:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     600:	08 95       	ret

00000602 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     602:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     606:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     60a:	08 95       	ret

0000060c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     632:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     636:	82 ff       	sbrs	r24, 2
     638:	0a c0       	rjmp	.+20     	; 0x64e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     63a:	80 91 e2 00 	lds	r24, 0x00E2
     63e:	82 ff       	sbrs	r24, 2
     640:	06 c0       	rjmp	.+12     	; 0x64e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     642:	80 91 e1 00 	lds	r24, 0x00E1
     646:	8b 7f       	andi	r24, 0xFB	; 251
     648:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     64c:	12 d3       	rcall	.+1572   	; 0xc72 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     64e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     652:	80 ff       	sbrs	r24, 0
     654:	1d c0       	rjmp	.+58     	; 0x690 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     656:	80 91 d8 00 	lds	r24, 0x00D8
     65a:	80 ff       	sbrs	r24, 0
     65c:	19 c0       	rjmp	.+50     	; 0x690 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     65e:	80 91 da 00 	lds	r24, 0x00DA
     662:	8e 7f       	andi	r24, 0xFE	; 254
     664:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     668:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     66c:	80 ff       	sbrs	r24, 0
     66e:	0c c0       	rjmp	.+24     	; 0x688 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     670:	8c e0       	ldi	r24, 0x0C	; 12
     672:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     674:	8e e0       	ldi	r24, 0x0E	; 14
     676:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     678:	09 b4       	in	r0, 0x29	; 41
     67a:	00 fe       	sbrs	r0, 0
     67c:	fd cf       	rjmp	.-6      	; 0x678 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 10 01 	sts	0x0110, r24
			EVENT_USB_Device_Connect();
     684:	12 de       	rcall	.-988    	; 0x2aa <EVENT_USB_Device_Connect>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     688:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     68a:	10 92 10 01 	sts	0x0110, r1
			EVENT_USB_Device_Disconnect();
     68e:	31 de       	rcall	.-926    	; 0x2f2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     690:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     694:	80 ff       	sbrs	r24, 0
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     698:	80 91 e2 00 	lds	r24, 0x00E2
     69c:	80 ff       	sbrs	r24, 0
     69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     6a0:	80 91 e2 00 	lds	r24, 0x00E2
     6a4:	8e 7f       	andi	r24, 0xFE	; 254
     6a6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     6aa:	80 91 e2 00 	lds	r24, 0x00E2
     6ae:	80 61       	ori	r24, 0x10	; 16
     6b0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     6b4:	80 91 d8 00 	lds	r24, 0x00D8
     6b8:	80 62       	ori	r24, 0x20	; 32
     6ba:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6be:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     6c0:	85 e0       	ldi	r24, 0x05	; 5
     6c2:	80 93 10 01 	sts	0x0110, r24
		EVENT_USB_Device_Suspend();
     6c6:	d5 d2       	rcall	.+1450   	; 0xc72 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     6c8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     6cc:	84 ff       	sbrs	r24, 4
     6ce:	2d c0       	rjmp	.+90     	; 0x72a <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     6d0:	80 91 e2 00 	lds	r24, 0x00E2
     6d4:	84 ff       	sbrs	r24, 4
     6d6:	29 c0       	rjmp	.+82     	; 0x72a <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     6d8:	8c e0       	ldi	r24, 0x0C	; 12
     6da:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     6dc:	8e e0       	ldi	r24, 0x0E	; 14
     6de:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     6e0:	09 b4       	in	r0, 0x29	; 41
     6e2:	00 fe       	sbrs	r0, 0
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     6e6:	80 91 d8 00 	lds	r24, 0x00D8
     6ea:	8f 7d       	andi	r24, 0xDF	; 223
     6ec:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     6f0:	80 91 e1 00 	lds	r24, 0x00E1
     6f4:	8f 7e       	andi	r24, 0xEF	; 239
     6f6:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     6fa:	80 91 e2 00 	lds	r24, 0x00E2
     6fe:	8f 7e       	andi	r24, 0xEF	; 239
     700:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     704:	80 91 e2 00 	lds	r24, 0x00E2
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     70e:	80 91 0c 01 	lds	r24, 0x010C
     712:	88 23       	and	r24, r24
     714:	31 f4       	brne	.+12     	; 0x722 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     716:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     71a:	87 fd       	sbrc	r24, 7
     71c:	02 c0       	rjmp	.+4      	; 0x722 <__vector_10+0x116>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	01 c0       	rjmp	.+2      	; 0x724 <__vector_10+0x118>
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	80 93 10 01 	sts	0x0110, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     728:	a4 d2       	rcall	.+1352   	; 0xc72 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     72a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     72e:	83 ff       	sbrs	r24, 3
     730:	22 c0       	rjmp	.+68     	; 0x776 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     732:	80 91 e2 00 	lds	r24, 0x00E2
     736:	83 ff       	sbrs	r24, 3
     738:	1e c0       	rjmp	.+60     	; 0x776 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     73a:	80 91 e1 00 	lds	r24, 0x00E1
     73e:	87 7f       	andi	r24, 0xF7	; 247
     740:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	80 93 10 01 	sts	0x0110, r24
		USB_Device_ConfigurationNumber = 0;
     74a:	10 92 0c 01 	sts	0x010C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     74e:	80 91 e1 00 	lds	r24, 0x00E1
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     758:	80 91 e2 00 	lds	r24, 0x00E2
     75c:	8e 7f       	andi	r24, 0xFE	; 254
     75e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     762:	80 91 e2 00 	lds	r24, 0x00E2
     766:	80 61       	ori	r24, 0x10	; 16
     768:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	42 e0       	ldi	r20, 0x02	; 2
     772:	97 de       	rcall	.-722    	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     774:	7e d2       	rcall	.+1276   	; 0xc72 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     776:	ff 91       	pop	r31
     778:	ef 91       	pop	r30
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	7f 91       	pop	r23
     784:	6f 91       	pop	r22
     786:	5f 91       	pop	r21
     788:	4f 91       	pop	r20
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <Endpoint_Write_Control_Stream_LE>:
     79c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     79e:	40 91 17 01 	lds	r20, 0x0117
     7a2:	50 91 18 01 	lds	r21, 0x0118
     7a6:	46 17       	cp	r20, r22
     7a8:	57 07       	cpc	r21, r23
     7aa:	18 f4       	brcc	.+6      	; 0x7b2 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7ac:	f9 01       	movw	r30, r18
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	3d c0       	rjmp	.+122    	; 0x82c <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7b2:	61 15       	cp	r22, r1
     7b4:	71 05       	cpc	r23, r1
     7b6:	11 f0       	breq	.+4      	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x20>
     7b8:	ab 01       	movw	r20, r22
     7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7bc:	80 91 e8 00 	lds	r24, 0x00E8
     7c0:	8e 77       	andi	r24, 0x7E	; 126
     7c2:	80 93 e8 00 	sts	0x00E8, r24
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	f0 cf       	rjmp	.-32     	; 0x7ac <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7cc:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7d0:	88 23       	and	r24, r24
     7d2:	f1 f1       	breq	.+124    	; 0x850 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7d4:	85 30       	cpi	r24, 0x05	; 5
     7d6:	f1 f1       	breq	.+124    	; 0x854 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7dc:	83 ff       	sbrs	r24, 3
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <Endpoint_Write_Control_Stream_LE+0x48>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7e8:	82 fd       	sbrc	r24, 2
     7ea:	2c c0       	rjmp	.+88     	; 0x844 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ec:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     7f0:	80 ff       	sbrs	r24, 0
     7f2:	1c c0       	rjmp	.+56     	; 0x82c <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     7f4:	20 91 f2 00 	lds	r18, 0x00F2
     7f8:	30 91 f3 00 	lds	r19, 0x00F3
     7fc:	07 c0       	rjmp	.+14     	; 0x80c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7fe:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     800:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     804:	41 50       	subi	r20, 0x01	; 1
     806:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     80c:	41 15       	cp	r20, r1
     80e:	51 05       	cpc	r21, r1
     810:	19 f0       	breq	.+6      	; 0x818 <Endpoint_Write_Control_Stream_LE+0x7c>
     812:	28 30       	cpi	r18, 0x08	; 8
     814:	31 05       	cpc	r19, r1
     816:	98 f3       	brcs	.-26     	; 0x7fe <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	28 30       	cpi	r18, 0x08	; 8
     81c:	31 05       	cpc	r19, r1
     81e:	09 f4       	brne	.+2      	; 0x822 <Endpoint_Write_Control_Stream_LE+0x86>
     820:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     822:	80 91 e8 00 	lds	r24, 0x00E8
     826:	8e 77       	andi	r24, 0x7E	; 126
     828:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     82c:	41 15       	cp	r20, r1
     82e:	51 05       	cpc	r21, r1
     830:	69 f6       	brne	.-102    	; 0x7cc <Endpoint_Write_Control_Stream_LE+0x30>
     832:	99 23       	and	r25, r25
     834:	59 f6       	brne	.-106    	; 0x7cc <Endpoint_Write_Control_Stream_LE+0x30>
     836:	06 c0       	rjmp	.+12     	; 0x844 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     838:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     83c:	88 23       	and	r24, r24
     83e:	41 f0       	breq	.+16     	; 0x850 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	41 f0       	breq	.+16     	; 0x854 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     844:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     848:	82 ff       	sbrs	r24, 2
     84a:	f6 cf       	rjmp	.-20     	; 0x838 <Endpoint_Write_Control_Stream_LE+0x9c>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	08 95       	ret
     854:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     856:	08 95       	ret

00000858 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     858:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     85a:	61 15       	cp	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	29 f4       	brne	.+10     	; 0x86a <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     860:	80 91 e8 00 	lds	r24, 0x00E8
     864:	8b 77       	andi	r24, 0x7B	; 123
     866:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     86a:	f9 01       	movw	r30, r18
     86c:	22 c0       	rjmp	.+68     	; 0x8b2 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     86e:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     872:	88 23       	and	r24, r24
     874:	71 f1       	breq	.+92     	; 0x8d2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	71 f1       	breq	.+92     	; 0x8d6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     87a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     87e:	83 ff       	sbrs	r24, 3
     880:	02 c0       	rjmp	.+4      	; 0x886 <Endpoint_Read_Control_Stream_LE+0x2e>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     886:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     88a:	82 ff       	sbrs	r24, 2
     88c:	f0 cf       	rjmp	.-32     	; 0x86e <Endpoint_Read_Control_Stream_LE+0x16>
     88e:	06 c0       	rjmp	.+12     	; 0x89c <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     890:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     894:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     896:	61 50       	subi	r22, 0x01	; 1
     898:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     89a:	31 f0       	breq	.+12     	; 0x8a8 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     89c:	80 91 f2 00 	lds	r24, 0x00F2
     8a0:	90 91 f3 00 	lds	r25, 0x00F3
     8a4:	89 2b       	or	r24, r25
     8a6:	a1 f7       	brne	.-24     	; 0x890 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8a8:	80 91 e8 00 	lds	r24, 0x00E8
     8ac:	8b 77       	andi	r24, 0x7B	; 123
     8ae:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     8b2:	61 15       	cp	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	d9 f6       	brne	.-74     	; 0x86e <Endpoint_Read_Control_Stream_LE+0x16>
     8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8ba:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8be:	88 23       	and	r24, r24
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8c2:	85 30       	cpi	r24, 0x05	; 5
     8c4:	41 f0       	breq	.+16     	; 0x8d6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8c6:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     8ca:	80 ff       	sbrs	r24, 0
     8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <Endpoint_Read_Control_Stream_LE+0x62>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	08 95       	ret
     8d6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8d8:	08 95       	ret

000008da <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     8da:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8dc:	40 91 17 01 	lds	r20, 0x0117
     8e0:	50 91 18 01 	lds	r21, 0x0118
     8e4:	46 17       	cp	r20, r22
     8e6:	57 07       	cpc	r21, r23
     8e8:	18 f4       	brcc	.+6      	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8ea:	f9 01       	movw	r30, r18
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	40 c0       	rjmp	.+128    	; 0x970 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8f0:	61 15       	cp	r22, r1
     8f2:	71 05       	cpc	r23, r1
     8f4:	11 f0       	breq	.+4      	; 0x8fa <Endpoint_Write_Control_PStream_LE+0x20>
     8f6:	ab 01       	movw	r20, r22
     8f8:	f8 cf       	rjmp	.-16     	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8fa:	80 91 e8 00 	lds	r24, 0x00E8
     8fe:	8e 77       	andi	r24, 0x7E	; 126
     900:	80 93 e8 00 	sts	0x00E8, r24
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	f0 cf       	rjmp	.-32     	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     90a:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <Endpoint_Write_Control_PStream_LE+0x3a>
     912:	40 c0       	rjmp	.+128    	; 0x994 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     914:	85 30       	cpi	r24, 0x05	; 5
     916:	09 f4       	brne	.+2      	; 0x91a <Endpoint_Write_Control_PStream_LE+0x40>
     918:	3f c0       	rjmp	.+126    	; 0x998 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     91a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     91e:	83 ff       	sbrs	r24, 3
     920:	02 c0       	rjmp	.+4      	; 0x926 <Endpoint_Write_Control_PStream_LE+0x4c>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     926:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     92a:	82 fd       	sbrc	r24, 2
     92c:	2d c0       	rjmp	.+90     	; 0x988 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     92e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     932:	80 ff       	sbrs	r24, 0
     934:	1d c0       	rjmp	.+58     	; 0x970 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     936:	20 91 f2 00 	lds	r18, 0x00F2
     93a:	30 91 f3 00 	lds	r19, 0x00F3
     93e:	08 c0       	rjmp	.+16     	; 0x950 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     940:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     942:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     946:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     948:	41 50       	subi	r20, 0x01	; 1
     94a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     950:	41 15       	cp	r20, r1
     952:	51 05       	cpc	r21, r1
     954:	19 f0       	breq	.+6      	; 0x95c <Endpoint_Write_Control_PStream_LE+0x82>
     956:	28 30       	cpi	r18, 0x08	; 8
     958:	31 05       	cpc	r19, r1
     95a:	90 f3       	brcs	.-28     	; 0x940 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	28 30       	cpi	r18, 0x08	; 8
     960:	31 05       	cpc	r19, r1
     962:	09 f4       	brne	.+2      	; 0x966 <Endpoint_Write_Control_PStream_LE+0x8c>
     964:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     966:	80 91 e8 00 	lds	r24, 0x00E8
     96a:	8e 77       	andi	r24, 0x7E	; 126
     96c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     970:	41 15       	cp	r20, r1
     972:	51 05       	cpc	r21, r1
     974:	51 f6       	brne	.-108    	; 0x90a <Endpoint_Write_Control_PStream_LE+0x30>
     976:	99 23       	and	r25, r25
     978:	41 f6       	brne	.-112    	; 0x90a <Endpoint_Write_Control_PStream_LE+0x30>
     97a:	06 c0       	rjmp	.+12     	; 0x988 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     97c:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     980:	88 23       	and	r24, r24
     982:	41 f0       	breq	.+16     	; 0x994 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     984:	85 30       	cpi	r24, 0x05	; 5
     986:	41 f0       	breq	.+16     	; 0x998 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     988:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     98c:	82 ff       	sbrs	r24, 2
     98e:	f6 cf       	rjmp	.-20     	; 0x97c <Endpoint_Write_Control_PStream_LE+0xa2>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	08 95       	ret
     998:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     99a:	08 95       	ret

0000099c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	ac 97       	sbiw	r28, 0x2c	; 44
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	e1 e1       	ldi	r30, 0x11	; 17
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9b8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9bc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	e9 31       	cpi	r30, 0x19	; 25
     9c2:	f2 07       	cpc	r31, r18
     9c4:	c9 f7       	brne	.-14     	; 0x9b8 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9c6:	0b dd       	rcall	.-1514   	; 0x3de <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9c8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9cc:	83 ff       	sbrs	r24, 3
     9ce:	38 c1       	rjmp	.+624    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9d0:	80 91 11 01 	lds	r24, 0x0111

		switch (USB_ControlRequest.bRequest)
     9d4:	30 91 12 01 	lds	r19, 0x0112
     9d8:	35 30       	cpi	r19, 0x05	; 5
     9da:	09 f4       	brne	.+2      	; 0x9de <USB_Device_ProcessControlRequest+0x42>
     9dc:	87 c0       	rjmp	.+270    	; 0xaec <USB_Device_ProcessControlRequest+0x150>
     9de:	36 30       	cpi	r19, 0x06	; 6
     9e0:	40 f4       	brcc	.+16     	; 0x9f2 <USB_Device_ProcessControlRequest+0x56>
     9e2:	31 30       	cpi	r19, 0x01	; 1
     9e4:	c9 f1       	breq	.+114    	; 0xa58 <USB_Device_ProcessControlRequest+0xbc>
     9e6:	31 30       	cpi	r19, 0x01	; 1
     9e8:	70 f0       	brcs	.+28     	; 0xa06 <USB_Device_ProcessControlRequest+0x6a>
     9ea:	33 30       	cpi	r19, 0x03	; 3
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <USB_Device_ProcessControlRequest+0x54>
     9ee:	28 c1       	rjmp	.+592    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
     9f0:	33 c0       	rjmp	.+102    	; 0xa58 <USB_Device_ProcessControlRequest+0xbc>
     9f2:	38 30       	cpi	r19, 0x08	; 8
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x5c>
     9f6:	f6 c0       	rjmp	.+492    	; 0xbe4 <USB_Device_ProcessControlRequest+0x248>
     9f8:	39 30       	cpi	r19, 0x09	; 9
     9fa:	09 f4       	brne	.+2      	; 0x9fe <USB_Device_ProcessControlRequest+0x62>
     9fc:	05 c1       	rjmp	.+522    	; 0xc08 <USB_Device_ProcessControlRequest+0x26c>
     9fe:	36 30       	cpi	r19, 0x06	; 6
     a00:	09 f0       	breq	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x68>
     a02:	1e c1       	rjmp	.+572    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
     a04:	97 c0       	rjmp	.+302    	; 0xb34 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a06:	80 38       	cpi	r24, 0x80	; 128
     a08:	21 f0       	breq	.+8      	; 0xa12 <USB_Device_ProcessControlRequest+0x76>
     a0a:	82 38       	cpi	r24, 0x82	; 130
     a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x74>
     a0e:	18 c1       	rjmp	.+560    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <USB_Device_ProcessControlRequest+0x86>
     a12:	90 91 0d 01 	lds	r25, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a16:	80 91 0e 01 	lds	r24, 0x010E
     a1a:	88 23       	and	r24, r24
     a1c:	99 f0       	breq	.+38     	; 0xa44 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a1e:	92 60       	ori	r25, 0x02	; 2
     a20:	11 c0       	rjmp	.+34     	; 0xa44 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a22:	80 91 15 01 	lds	r24, 0x0115
     a26:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a28:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a2c:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	25 e0       	ldi	r18, 0x05	; 5
     a34:	96 95       	lsr	r25
     a36:	87 95       	ror	r24
     a38:	2a 95       	dec	r18
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <USB_Device_ProcessControlRequest+0x98>
     a3c:	98 2f       	mov	r25, r24
     a3e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a40:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a44:	80 91 e8 00 	lds	r24, 0x00E8
     a48:	87 7f       	andi	r24, 0xF7	; 247
     a4a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a4e:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     a52:	10 92 f1 00 	sts	0x00F1, r1
     a56:	d1 c0       	rjmp	.+418    	; 0xbfa <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a58:	88 23       	and	r24, r24
     a5a:	19 f0       	breq	.+6      	; 0xa62 <USB_Device_ProcessControlRequest+0xc6>
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0xc6>
     a60:	ef c0       	rjmp	.+478    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8f 71       	andi	r24, 0x1F	; 31
     a66:	90 70       	andi	r25, 0x00	; 0
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	21 f0       	breq	.+8      	; 0xa74 <USB_Device_ProcessControlRequest+0xd8>
     a6c:	02 97       	sbiw	r24, 0x02	; 2
     a6e:	09 f0       	breq	.+2      	; 0xa72 <USB_Device_ProcessControlRequest+0xd6>
     a70:	e7 c0       	rjmp	.+462    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a74:	80 91 13 01 	lds	r24, 0x0113
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	09 f0       	breq	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0xe2>
     a7c:	e1 c0       	rjmp	.+450    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a7e:	10 92 0e 01 	sts	0x010E, r1
     a82:	33 30       	cpi	r19, 0x03	; 3
     a84:	69 f5       	brne	.+90     	; 0xae0 <USB_Device_ProcessControlRequest+0x144>
     a86:	80 93 0e 01 	sts	0x010E, r24
     a8a:	2a c0       	rjmp	.+84     	; 0xae0 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a8c:	80 91 13 01 	lds	r24, 0x0113
     a90:	88 23       	and	r24, r24
     a92:	31 f5       	brne	.+76     	; 0xae0 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a94:	20 91 15 01 	lds	r18, 0x0115
     a98:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a9a:	09 f4       	brne	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x102>
     a9c:	d1 c0       	rjmp	.+418    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a9e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     aa2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aa6:	80 ff       	sbrs	r24, 0
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     aaa:	33 30       	cpi	r19, 0x03	; 3
     aac:	21 f4       	brne	.+8      	; 0xab6 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     aae:	80 91 eb 00 	lds	r24, 0x00EB
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	13 c0       	rjmp	.+38     	; 0xadc <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ab6:	80 91 eb 00 	lds	r24, 0x00EB
     aba:	80 61       	ori	r24, 0x10	; 16
     abc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <USB_Device_ProcessControlRequest+0x12e>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	2a 95       	dec	r18
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <USB_Device_ProcessControlRequest+0x12a>
     ace:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     ad2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ad6:	80 91 eb 00 	lds	r24, 0x00EB
     ada:	88 60       	ori	r24, 0x08	; 8
     adc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ae0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ae4:	80 91 e8 00 	lds	r24, 0x00E8
     ae8:	87 7f       	andi	r24, 0xF7	; 247
     aea:	8a c0       	rjmp	.+276    	; 0xc00 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     aec:	88 23       	and	r24, r24
     aee:	09 f0       	breq	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0x156>
     af0:	a7 c0       	rjmp	.+334    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     af2:	10 91 13 01 	lds	r17, 0x0113
     af6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     af8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     afa:	f8 94       	cli
     afc:	80 91 e8 00 	lds	r24, 0x00E8
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b06:	02 dd       	rcall	.-1532   	; 0x50c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b08:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b0c:	80 ff       	sbrs	r24, 0
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b10:	80 91 e3 00 	lds	r24, 0x00E3
     b14:	80 78       	andi	r24, 0x80	; 128
     b16:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b18:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b1c:	80 68       	ori	r24, 0x80	; 128
     b1e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b22:	11 23       	and	r17, r17
     b24:	11 f4       	brne	.+4      	; 0xb2a <USB_Device_ProcessControlRequest+0x18e>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0x190>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	80 93 10 01 	sts	0x0110, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b30:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     b32:	86 c0       	rjmp	.+268    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b34:	80 58       	subi	r24, 0x80	; 128
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	08 f0       	brcs	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x1a0>
     b3a:	82 c0       	rjmp	.+260    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b3c:	80 91 13 01 	lds	r24, 0x0113
     b40:	90 91 14 01 	lds	r25, 0x0114
     b44:	23 e0       	ldi	r18, 0x03	; 3
     b46:	8c 3d       	cpi	r24, 0xDC	; 220
     b48:	92 07       	cpc	r25, r18
     b4a:	09 f0       	breq	.+2      	; 0xb4e <USB_Device_ProcessControlRequest+0x1b2>
     b4c:	33 c0       	rjmp	.+102    	; 0xbb4 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b52:	8a e2       	ldi	r24, 0x2A	; 42
     b54:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b56:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b58:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b5a:	de 01       	movw	r26, r28
     b5c:	15 96       	adiw	r26, 0x05	; 5
     b5e:	6e e0       	ldi	r22, 0x0E	; 14
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b64:	11 e2       	ldi	r17, 0x21	; 33
     b66:	e6 2f       	mov	r30, r22
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 93 57 00 	sts	0x0057, r17
     b6e:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     b70:	40 ff       	sbrs	r20, 0
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
     b74:	82 95       	swap	r24
     b76:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     b78:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	18 f0       	brcs	.+6      	; 0xb8a <USB_Device_ProcessControlRequest+0x1ee>
     b84:	c9 01       	movw	r24, r18
     b86:	c7 96       	adiw	r24, 0x37	; 55
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <USB_Device_ProcessControlRequest+0x1f2>
     b8a:	c9 01       	movw	r24, r18
     b8c:	c0 96       	adiw	r24, 0x30	; 48
     b8e:	8d 93       	st	X+, r24
     b90:	9d 93       	st	X+, r25
     b92:	4f 5f       	subi	r20, 0xFF	; 255
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b96:	44 31       	cpi	r20, 0x14	; 20
     b98:	51 05       	cpc	r21, r1
     b9a:	29 f7       	brne	.-54     	; 0xb66 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b9c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b9e:	80 91 e8 00 	lds	r24, 0x00E8
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ba8:	ce 01       	movw	r24, r28
     baa:	03 96       	adiw	r24, 0x03	; 3
     bac:	6a e2       	ldi	r22, 0x2A	; 42
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	f5 dd       	rcall	.-1046   	; 0x79c <Endpoint_Write_Control_Stream_LE>
     bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bb4:	60 91 15 01 	lds	r22, 0x0115
     bb8:	ae 01       	movw	r20, r28
     bba:	4f 5f       	subi	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	43 dc       	rcall	.-1914   	; 0x446 <CALLBACK_USB_GetDescriptor>
     bc0:	bc 01       	movw	r22, r24
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0x22c>
     bc6:	3c c0       	rjmp	.+120    	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
     bc8:	80 91 e8 00 	lds	r24, 0x00E8
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	81 de       	rcall	.-766    	; 0x8da <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bd8:	80 91 e8 00 	lds	r24, 0x00E8
     bdc:	8b 77       	andi	r24, 0x7B	; 123
     bde:	80 93 e8 00 	sts	0x00E8, r24
     be2:	2e c0       	rjmp	.+92     	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     be4:	80 38       	cpi	r24, 0x80	; 128
     be6:	61 f5       	brne	.+88     	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     be8:	80 91 e8 00 	lds	r24, 0x00E8
     bec:	87 7f       	andi	r24, 0xF7	; 247
     bee:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bf2:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bf6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
     bfe:	8e 77       	andi	r24, 0x7E	; 126
     c00:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c04:	83 dc       	rcall	.-1786   	; 0x50c <Endpoint_ClearStatusStage>
     c06:	1c c0       	rjmp	.+56     	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c08:	88 23       	and	r24, r24
     c0a:	d1 f4       	brne	.+52     	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c0c:	90 91 13 01 	lds	r25, 0x0113
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	b0 f4       	brcc	.+44     	; 0xc40 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c14:	80 91 e8 00 	lds	r24, 0x00E8
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c1e:	90 93 0c 01 	sts	0x010C, r25

	Endpoint_ClearStatusStage();
     c22:	74 dc       	rcall	.-1816   	; 0x50c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c24:	80 91 0c 01 	lds	r24, 0x010C
     c28:	88 23       	and	r24, r24
     c2a:	31 f4       	brne	.+12     	; 0xc38 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c2c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c30:	87 fd       	sbrc	r24, 7
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <USB_Device_ProcessControlRequest+0x29c>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0x29e>
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	80 93 10 01 	sts	0x0110, r24

	EVENT_USB_Device_ConfigurationChanged();
     c3e:	d2 db       	rcall	.-2140   	; 0x3e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c40:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c44:	83 ff       	sbrs	r24, 3
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c48:	80 91 eb 00 	lds	r24, 0x00EB
     c4c:	80 62       	ori	r24, 0x20	; 32
     c4e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c52:	80 91 e8 00 	lds	r24, 0x00E8
     c56:	87 7f       	andi	r24, 0xF7	; 247
     c58:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c5c:	ac 96       	adiw	r28, 0x2c	; 44
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c72:	08 95       	ret

00000c74 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c74:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c76:	80 91 10 01 	lds	r24, 0x0110
     c7a:	88 23       	and	r24, r24
     c7c:	61 f0       	breq	.+24     	; 0xc96 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c7e:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c82:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c86:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     c8a:	83 ff       	sbrs	r24, 3
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     c8e:	86 de       	rcall	.-756    	; 0x99c <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c90:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c92:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     c96:	1f 91       	pop	r17
     c98:	08 95       	ret

00000c9a <Audio_Device_Event_Stub>:
}

void Audio_Device_Event_Stub(void)
{

}
     c9a:	08 95       	ret

00000c9c <Audio_Device_ConfigureEndpoints>:
			break;
	}
}

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
     ca4:	1f 82       	std	Y+7, r1	; 0x07
     ca6:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == AudioInterfaceInfo->Config.DataINEndpointNumber)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	18 17       	cp	r17, r24
     cac:	21 f4       	brne	.+8      	; 0xcb6 <Audio_Device_ConfigureEndpoints+0x1a>
		{
			Size         = AudioInterfaceInfo->Config.DataINEndpointSize;
     cae:	2a 81       	ldd	r18, Y+2	; 0x02
     cb0:	3b 81       	ldd	r19, Y+3	; 0x03
     cb2:	50 e8       	ldi	r21, 0x80	; 128
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <Audio_Device_ConfigureEndpoints+0x26>
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_ISOCHRONOUS;
			DoubleBanked = true;
		}
		else if (EndpointNum == AudioInterfaceInfo->Config.DataOUTEndpointNumber)
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	18 17       	cp	r17, r24
     cba:	c1 f4       	brne	.+48     	; 0xcec <Audio_Device_ConfigureEndpoints+0x50>
		{
			Size         = AudioInterfaceInfo->Config.DataOUTEndpointSize;
     cbc:	2d 81       	ldd	r18, Y+5	; 0x05
     cbe:	3e 81       	ldd	r19, Y+6	; 0x06
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	88 e0       	ldi	r24, 0x08	; 8
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <Audio_Device_ConfigureEndpoints+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     cca:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     cd0:	82 17       	cp	r24, r18
     cd2:	93 07       	cpc	r25, r19
     cd4:	d0 f3       	brcs	.-12     	; 0xcca <Audio_Device_ConfigureEndpoints+0x2e>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	51 11       	cpse	r21, r1
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	60 64       	ori	r22, 0x40	; 64
     cde:	42 95       	swap	r20
     ce0:	40 7f       	andi	r20, 0xF0	; 240
     ce2:	46 60       	ori	r20, 0x06	; 6
     ce4:	81 2f       	mov	r24, r17
     ce6:	dd db       	rcall	.-2118   	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv>
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     ce8:	88 23       	and	r24, r24
     cea:	21 f0       	breq	.+8      	; 0xcf4 <Audio_Device_ConfigureEndpoints+0x58>

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     cec:	1f 5f       	subi	r17, 0xFF	; 255
     cee:	17 30       	cpi	r17, 0x07	; 7
     cf0:	d9 f6       	brne	.-74     	; 0xca8 <Audio_Device_ConfigureEndpoints+0xc>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	08 95       	ret

00000cfc <Audio_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     cfc:	2f 92       	push	r2
     cfe:	3f 92       	push	r3
     d00:	5f 92       	push	r5
     d02:	6f 92       	push	r6
     d04:	7f 92       	push	r7
     d06:	8f 92       	push	r8
     d08:	9f 92       	push	r9
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <Audio_Device_ProcessControlRequest+0x24>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	4c 01       	movw	r8, r24
				}
			}

			break;
	}
}
     d26:	2d b6       	in	r2, 0x3d	; 61
     d28:	3e b6       	in	r3, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d2a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d2e:	83 ff       	sbrs	r24, 3
     d30:	3e c1       	rjmp	.+636    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     d32:	40 91 11 01 	lds	r20, 0x0111
     d36:	84 2f       	mov	r24, r20
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	8f 71       	andi	r24, 0x1F	; 31
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	69 f4       	brne	.+26     	; 0xd5e <Audio_Device_ProcessControlRequest+0x62>
	{
		if ((USB_ControlRequest.wIndex & 0xFF) != AudioInterfaceInfo->Config.StreamingInterfaceNumber)
     d44:	20 91 15 01 	lds	r18, 0x0115
     d48:	30 91 16 01 	lds	r19, 0x0116
     d4c:	30 70       	andi	r19, 0x00	; 0
     d4e:	f4 01       	movw	r30, r8
     d50:	80 81       	ld	r24, Z
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	09 f0       	breq	.+2      	; 0xd5c <Audio_Device_ProcessControlRequest+0x60>
     d5a:	29 c1       	rjmp	.+594    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     d5c:	0d c0       	rjmp	.+26     	; 0xd78 <Audio_Device_ProcessControlRequest+0x7c>
		  return;
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     d5e:	02 97       	sbiw	r24, 0x02	; 2
     d60:	59 f4       	brne	.+22     	; 0xd78 <Audio_Device_ProcessControlRequest+0x7c>
	{
		uint8_t EndpointIndex = (USB_ControlRequest.wIndex & 0xFF);
     d62:	90 91 15 01 	lds	r25, 0x0115
	
		if ((EndpointIndex != (ENDPOINT_DIR_IN  | AudioInterfaceInfo->Config.DataINEndpointNumber)) &&
     d66:	f4 01       	movw	r30, r8
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	98 17       	cp	r25, r24
     d6e:	21 f0       	breq	.+8      	; 0xd78 <Audio_Device_ProcessControlRequest+0x7c>
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	98 17       	cp	r25, r24
     d74:	09 f0       	breq	.+2      	; 0xd78 <Audio_Device_ProcessControlRequest+0x7c>
     d76:	1b c1       	rjmp	.+566    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
     d78:	70 90 12 01 	lds	r7, 0x0112
     d7c:	fb e0       	ldi	r31, 0x0B	; 11
     d7e:	7f 16       	cp	r7, r31
     d80:	a9 f0       	breq	.+42     	; 0xdac <Audio_Device_ProcessControlRequest+0xb0>
     d82:	f7 15       	cp	r31, r7
     d84:	30 f0       	brcs	.+12     	; 0xd92 <Audio_Device_ProcessControlRequest+0x96>
     d86:	87 2d       	mov	r24, r7
     d88:	81 50       	subi	r24, 0x01	; 1
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <Audio_Device_ProcessControlRequest+0x94>
     d8e:	0f c1       	rjmp	.+542    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     d90:	2b c0       	rjmp	.+86     	; 0xde8 <Audio_Device_ProcessControlRequest+0xec>
     d92:	21 e8       	ldi	r18, 0x81	; 129
     d94:	72 16       	cp	r7, r18
     d96:	08 f4       	brcc	.+2      	; 0xd9a <Audio_Device_ProcessControlRequest+0x9e>
     d98:	0a c1       	rjmp	.+532    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     d9a:	34 e8       	ldi	r19, 0x84	; 132
     d9c:	37 15       	cp	r19, r7
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <Audio_Device_ProcessControlRequest+0xa6>
     da0:	a5 c0       	rjmp	.+330    	; 0xeec <Audio_Device_ProcessControlRequest+0x1f0>
     da2:	6f ef       	ldi	r22, 0xFF	; 255
     da4:	76 16       	cp	r7, r22
     da6:	09 f0       	breq	.+2      	; 0xdaa <Audio_Device_ProcessControlRequest+0xae>
     da8:	02 c1       	rjmp	.+516    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     daa:	13 c0       	rjmp	.+38     	; 0xdd2 <Audio_Device_ProcessControlRequest+0xd6>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     dac:	41 30       	cpi	r20, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <Audio_Device_ProcessControlRequest+0xb6>
     db0:	fe c0       	rjmp	.+508    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dbc:	a7 db       	rcall	.-2226   	; 0x50c <Endpoint_ClearStatusStage>

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 91 13 01 	lds	r24, 0x0113
     dc4:	81 11       	cpse	r24, r1
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	f4 01       	movw	r30, r8
     dca:	97 83       	std	Z+7, r25	; 0x07
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
     dcc:	c4 01       	movw	r24, r8
     dce:	65 df       	rcall	.-310    	; 0xc9a <Audio_Device_Event_Stub>
     dd0:	ee c0       	rjmp	.+476    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     dd2:	41 52       	subi	r20, 0x21	; 33
     dd4:	42 30       	cpi	r20, 0x02	; 2
     dd6:	08 f0       	brcs	.+2      	; 0xdda <Audio_Device_ProcessControlRequest+0xde>
     dd8:	ea c0       	rjmp	.+468    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     dda:	80 91 e8 00 	lds	r24, 0x00E8
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 93 e8 00 	sts	0x00E8, r24
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     de4:	93 db       	rcall	.-2266   	; 0x50c <Endpoint_ClearStatusStage>
     de6:	e3 c0       	rjmp	.+454    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
     de8:	42 32       	cpi	r20, 0x22	; 34
     dea:	09 f0       	breq	.+2      	; 0xdee <Audio_Device_ProcessControlRequest+0xf2>
     dec:	40 c0       	rjmp	.+128    	; 0xe6e <Audio_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     dee:	60 90 15 01 	lds	r6, 0x0115
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
     df2:	50 90 14 01 	lds	r5, 0x0114

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     df6:	c4 01       	movw	r24, r8
     df8:	67 2d       	mov	r22, r7
     dfa:	46 2d       	mov	r20, r6
     dfc:	25 2d       	mov	r18, r5
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	ee 24       	eor	r14, r14
     e04:	ff 24       	eor	r15, r15
     e06:	80 da       	rcall	.-2816   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <Audio_Device_ProcessControlRequest+0x112>
     e0c:	d0 c0       	rjmp	.+416    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     e0e:	bd b6       	in	r11, 0x3d	; 61
     e10:	ae b6       	in	r10, 0x3e	; 62
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     e12:	80 91 17 01 	lds	r24, 0x0117
     e16:	90 91 18 01 	lds	r25, 0x0118
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
					uint8_t  Value[ValueLength];
     e1e:	2d b7       	in	r18, 0x3d	; 61
     e20:	3e b7       	in	r19, 0x3e	; 62
     e22:	28 1b       	sub	r18, r24
     e24:	39 0b       	sbc	r19, r25
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	3e bf       	out	0x3e, r19	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	2d bf       	out	0x3d, r18	; 61
     e30:	cd b6       	in	r12, 0x3d	; 61
     e32:	de b6       	in	r13, 0x3e	; 62
     e34:	08 94       	sec
     e36:	c1 1c       	adc	r12, r1
     e38:	d1 1c       	adc	r13, r1
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	80 93 e8 00 	sts	0x00E8, r24

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     e44:	69 81       	ldd	r22, Y+1	; 0x01
     e46:	7a 81       	ldd	r23, Y+2	; 0x02
     e48:	c6 01       	movw	r24, r12
     e4a:	06 dd       	rcall	.-1524   	; 0x858 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
     e50:	8e 77       	andi	r24, 0x7E	; 126
     e52:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     e56:	c4 01       	movw	r24, r8
     e58:	67 2d       	mov	r22, r7
     e5a:	46 2d       	mov	r20, r6
     e5c:	25 2d       	mov	r18, r5
     e5e:	8e 01       	movw	r16, r28
     e60:	0f 5f       	subi	r16, 0xFF	; 255
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	76 01       	movw	r14, r12
     e66:	50 da       	rcall	.-2912   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e68:	2b 2d       	mov	r18, r11
     e6a:	3a 2d       	mov	r19, r10
     e6c:	39 c0       	rjmp	.+114    	; 0xee0 <Audio_Device_ProcessControlRequest+0x1e4>
					                                             EndpointControl, &ValueLength, Value);
				}
			}
			else if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e6e:	41 32       	cpi	r20, 0x21	; 33
     e70:	09 f0       	breq	.+2      	; 0xe74 <Audio_Device_ProcessControlRequest+0x178>
     e72:	9d c0       	rjmp	.+314    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
     e74:	60 90 16 01 	lds	r6, 0x0116
				uint16_t Parameter = USB_ControlRequest.wValue;
     e78:	a0 90 13 01 	lds	r10, 0x0113
     e7c:	b0 90 14 01 	lds	r11, 0x0114

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     e80:	c4 01       	movw	r24, r8
     e82:	67 2d       	mov	r22, r7
     e84:	46 2d       	mov	r20, r6
     e86:	95 01       	movw	r18, r10
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	a4 da       	rcall	.-2744   	; 0x3da <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     e92:	88 23       	and	r24, r24
     e94:	09 f4       	brne	.+2      	; 0xe98 <Audio_Device_ProcessControlRequest+0x19c>
     e96:	8b c0       	rjmp	.+278    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     e98:	dd b6       	in	r13, 0x3d	; 61
     e9a:	ce b6       	in	r12, 0x3e	; 62
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     e9c:	60 91 17 01 	lds	r22, 0x0117
     ea0:	70 91 18 01 	lds	r23, 0x0118
					uint8_t  Value[ValueLength];
     ea4:	8d b7       	in	r24, 0x3d	; 61
     ea6:	9e b7       	in	r25, 0x3e	; 62
     ea8:	86 1b       	sub	r24, r22
     eaa:	97 0b       	sbc	r25, r23
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	9e bf       	out	0x3e, r25	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	8d bf       	out	0x3d, r24	; 61
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb6:	80 91 e8 00 	lds	r24, 0x00E8
     eba:	87 7f       	andi	r24, 0xF7	; 247
     ebc:	80 93 e8 00 	sts	0x00E8, r24

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     ec0:	8d b7       	in	r24, 0x3d	; 61
     ec2:	9e b7       	in	r25, 0x3e	; 62
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	c8 dc       	rcall	.-1648   	; 0x858 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec8:	80 91 e8 00 	lds	r24, 0x00E8
     ecc:	8e 77       	andi	r24, 0x7E	; 126
     ece:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     ed2:	c4 01       	movw	r24, r8
     ed4:	67 2d       	mov	r22, r7
     ed6:	46 2d       	mov	r20, r6
     ed8:	95 01       	movw	r18, r10
     eda:	7f da       	rcall	.-2818   	; 0x3da <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     edc:	2d 2d       	mov	r18, r13
     ede:	3c 2d       	mov	r19, r12
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	3e bf       	out	0x3e, r19	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	2d bf       	out	0x3d, r18	; 61
     eea:	61 c0       	rjmp	.+194    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     eec:	42 3a       	cpi	r20, 0xA2	; 162
     eee:	11 f5       	brne	.+68     	; 0xf34 <Audio_Device_ProcessControlRequest+0x238>
     ef0:	bd b6       	in	r11, 0x3d	; 61
     ef2:	ae b6       	in	r10, 0x3e	; 62
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     ef4:	40 91 15 01 	lds	r20, 0x0115
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
     ef8:	20 91 14 01 	lds	r18, 0x0114
				uint16_t ValueLength      = USB_ControlRequest.wLength;
     efc:	80 91 17 01 	lds	r24, 0x0117
     f00:	90 91 18 01 	lds	r25, 0x0118
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  Value[ValueLength];
     f08:	ed b7       	in	r30, 0x3d	; 61
     f0a:	fe b7       	in	r31, 0x3e	; 62
     f0c:	e8 1b       	sub	r30, r24
     f0e:	f9 0b       	sbc	r31, r25
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	fe bf       	out	0x3e, r31	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	ed bf       	out	0x3d, r30	; 61
     f1a:	cd b6       	in	r12, 0x3d	; 61
     f1c:	de b6       	in	r13, 0x3e	; 62
     f1e:	08 94       	sec
     f20:	c1 1c       	adc	r12, r1
     f22:	d1 1c       	adc	r13, r1

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     f24:	c4 01       	movw	r24, r8
     f26:	67 2d       	mov	r22, r7
     f28:	8e 01       	movw	r16, r28
     f2a:	0f 5f       	subi	r16, 0xFF	; 255
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	76 01       	movw	r14, r12
     f30:	eb d9       	rcall	.-3114   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     f32:	25 c0       	rjmp	.+74     	; 0xf7e <Audio_Device_ProcessControlRequest+0x282>
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearOUT();
				}
			}
			else if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f34:	41 3a       	cpi	r20, 0xA1	; 161
     f36:	d9 f5       	brne	.+118    	; 0xfae <Audio_Device_ProcessControlRequest+0x2b2>
     f38:	bd b6       	in	r11, 0x3d	; 61
     f3a:	ae b6       	in	r10, 0x3e	; 62
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
     f3c:	40 91 16 01 	lds	r20, 0x0116
				uint16_t Parameter   = USB_ControlRequest.wValue;
     f40:	20 91 13 01 	lds	r18, 0x0113
     f44:	30 91 14 01 	lds	r19, 0x0114
				uint16_t ValueLength = USB_ControlRequest.wLength;
     f48:	80 91 17 01 	lds	r24, 0x0117
     f4c:	90 91 18 01 	lds	r25, 0x0118
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  Value[ValueLength];
     f54:	6d b7       	in	r22, 0x3d	; 61
     f56:	7e b7       	in	r23, 0x3e	; 62
     f58:	68 1b       	sub	r22, r24
     f5a:	79 0b       	sbc	r23, r25
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	7e bf       	out	0x3e, r23	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	6d bf       	out	0x3d, r22	; 61
     f66:	cd b6       	in	r12, 0x3d	; 61
     f68:	de b6       	in	r13, 0x3e	; 62
     f6a:	08 94       	sec
     f6c:	c1 1c       	adc	r12, r1
     f6e:	d1 1c       	adc	r13, r1

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     f70:	c4 01       	movw	r24, r8
     f72:	67 2d       	mov	r22, r7
     f74:	8e 01       	movw	r16, r28
     f76:	0f 5f       	subi	r16, 0xFF	; 255
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	76 01       	movw	r14, r12
     f7c:	2e da       	rcall	.-2980   	; 0x3da <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     f7e:	88 23       	and	r24, r24
     f80:	71 f0       	breq	.+28     	; 0xf9e <Audio_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f82:	80 91 e8 00 	lds	r24, 0x00E8
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	80 93 e8 00 	sts	0x00E8, r24
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	7a 81       	ldd	r23, Y+2	; 0x02
     f90:	c6 01       	movw	r24, r12
     f92:	04 dc       	rcall	.-2040   	; 0x79c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f94:	80 91 e8 00 	lds	r24, 0x00E8
     f98:	8b 77       	andi	r24, 0x7B	; 123
     f9a:	80 93 e8 00 	sts	0x00E8, r24
     f9e:	8b 2d       	mov	r24, r11
     fa0:	9a 2d       	mov	r25, r10
     fa2:	9c 01       	movw	r18, r24
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	3e bf       	out	0x3e, r19	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	2d bf       	out	0x3d, r18	; 61
				}
			}

			break;
	}
}
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	3e be       	out	0x3e, r3	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	2d be       	out	0x3d, r2	; 61
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	9f 90       	pop	r9
     fd2:	8f 90       	pop	r8
     fd4:	7f 90       	pop	r7
     fd6:	6f 90       	pop	r6
     fd8:	5f 90       	pop	r5
     fda:	3f 90       	pop	r3
     fdc:	2f 90       	pop	r2
     fde:	08 95       	ret

00000fe0 <__udivmodsi4>:
     fe0:	a1 e2       	ldi	r26, 0x21	; 33
     fe2:	1a 2e       	mov	r1, r26
     fe4:	aa 1b       	sub	r26, r26
     fe6:	bb 1b       	sub	r27, r27
     fe8:	fd 01       	movw	r30, r26
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <__udivmodsi4_ep>

00000fec <__udivmodsi4_loop>:
     fec:	aa 1f       	adc	r26, r26
     fee:	bb 1f       	adc	r27, r27
     ff0:	ee 1f       	adc	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	a2 17       	cp	r26, r18
     ff6:	b3 07       	cpc	r27, r19
     ff8:	e4 07       	cpc	r30, r20
     ffa:	f5 07       	cpc	r31, r21
     ffc:	20 f0       	brcs	.+8      	; 0x1006 <__udivmodsi4_ep>
     ffe:	a2 1b       	sub	r26, r18
    1000:	b3 0b       	sbc	r27, r19
    1002:	e4 0b       	sbc	r30, r20
    1004:	f5 0b       	sbc	r31, r21

00001006 <__udivmodsi4_ep>:
    1006:	66 1f       	adc	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	1a 94       	dec	r1
    1010:	69 f7       	brne	.-38     	; 0xfec <__udivmodsi4_loop>
    1012:	60 95       	com	r22
    1014:	70 95       	com	r23
    1016:	80 95       	com	r24
    1018:	90 95       	com	r25
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	bd 01       	movw	r22, r26
    1020:	cf 01       	movw	r24, r30
    1022:	08 95       	ret

00001024 <_exit>:
    1024:	f8 94       	cli

00001026 <__stop_program>:
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <__stop_program>
